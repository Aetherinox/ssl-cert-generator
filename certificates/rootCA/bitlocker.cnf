# #
#   OpenSSL Config > Bitlocker Encryption
#
#   SHOULD BE UTILIZED FOR BITLOCKER AND WINDOWS EFS ENCRYPTION.
#   CAN BE LOADED INTO SLOT 9D ON A YUBIKEY.
# #

oid_section                     = oids

[ oids ]
nameDistinguisher               = 0.2.262.1.10.7.20
msEFSR                          = 1.3.6.1.4.1.311.10.3.4.1
msEFSRecovery                   = 1.3.6.1.4.1.311.21.6
driveEncryption                 = 1.3.6.1.4.1.311.67.1.1
driveRecovery                   = 1.3.6.1.4.1.311.67.1.2
rda                             = 1.3.6.1.4.1.311.54.1.2
gpgUsageCert                    = 1.3.6.1.4.1.11591.2.6.1
gpgUsageSign                    = 1.3.6.1.4.1.11591.2.6.2
gpgUsageEncr                    = 1.3.6.1.4.1.11591.2.6.3
gpgUsageAuth                    = 1.3.6.1.4.1.11591.2.6.4
msAuthenticode                  = 1.3.6.1.4.1.311.2

# #
#   Certificate Authority Action
# #

[ ca ]
default_ca                      = CA_default

# #
#   Policy > Strict
#
#   The root CA should only sign intermediate certificates that match.
#   See the POLICY FORMAT section of `man ca`.
# #

[ policy_strict ]
countryName                     = match
stateOrProvinceName             = match
organizationName                = match
organizationalUnitName          = optional
commonName                      = supplied
emailAddress                    = optional

# #
#   Policy > Loose
#
#   Allow the intermediate CA to sign a more diverse range of certificates.
#   See the POLICY FORMAT section of the `ca` man page.
# #

[ policy_loose ]
countryName                     = optional
stateOrProvinceName             = optional
localityName                    = optional
organizationName                = optional
organizationalUnitName          = optional
commonName                      = supplied
emailAddress                    = optional

# #
#   Directory & file locations
# #

[ CA_default ]
dir                             = ./certificates/rootCA
certs                           = $dir/certs
crl_dir                         = $dir/crl
new_certs_dir                   = $dir/generated
database                        = $dir/certs.db
serial                          = $dir/serial
RANDFILE                        = $dir/private/.rand
copy_extensions                 = copy

# root key and root certificate.
private_key                     = $dir/rootCA.key.main-01.enc.priv.pem
certificate                     = $dir/rootCA.crt

# certificate revocation lists.
crlnumber                       = $dir/crlnumber
crl                             = $dir/crl/ca.crl.pem
crl_extensions                  = crl_ext
default_crl_days                = 36500
default_days                    = 36500

default_bits                    = 4096
default_md                      = sha512
name_opt                        = ca_default
cert_opt                        = ca_default
preserve                        = no
policy                          = policy_loose

            # #
            #   Certificate Revocation Lists
            #
            #   Called from [ CA_default ]
            # #

            [ crl_ext ]
            authorityKeyIdentifier          = keyid:always

# #
#   Root CA > PKCS#10 Certificate Request
#   
#   Configures the openssl req command
#   called via openssl req -section req_rootCA
#   
#   dont use the 'prompt' option unless you want to change how this file is structured.
#   prompt=no           the default values don't come from fieldname_default, they come from
#                       the actual values specified below.
#   
#   prompt=yes          the default values come from fieldname_default.
# #

[ req_rootCA ]
default_bits                    = 4096
default_keyfile                 = rootCA.key.main-01.enc.priv.pem
default_md                      = sha512
default_crl_days                = 36500
default_days                    = 36500
string_mask                     = MASK:0x2002
utf8                            = yes
# prompt                        = no
serial                          = 001-ssl-ca
copy_extensions                 = copy
distinguished_name              = dn_rootCA
x509_extensions                 = x509_rootCA

            # #
            #   Root CA > Distinguished Name - Template
            #   
            #   <https://en.wikipedia.org/wiki/Certificate_signing_request>
            # #

            [ dn_rootCA ]
            countryName                     = Country Name 2 Letter
            countryName_default             = NA

            stateOrProvinceName             = State or Province Name
            stateOrProvinceName_default     = NA

            localityName                    = Locality Name
            localityName_default            = NA

            0.organizationName              = Organization Name
            0.organizationName_default      = Company Name

            organizationalUnitName          = Organizational Unit Name
            organizationalUnitName_default  = Root Certificate Authority

            commonName                      = Common Name
            commonName_default              = Root Certificate Authority

            emailAddress                    = Email Address
            emailAddress_default            = system@domain.local

            description                     = Description (main purpose for the certificate)
            description_default             = Organization Certificate Authority

            givenName                       = Given Name
            givenName_default               = Root Certificate Authority

            title                           = Title
            title_default                   = Root Certificate Authority

            initials                        = Certificate Initials
            initials_default                = 001-ssl-ca

            # #
            #   Root CA > Extensions
            #   
            #   executed from bash script with command
            #       openssl req -config "/home/user/Desktop/ssh/certificates/rootCA/rootCA.cnf" -key "rootCA.key.main-01.enc.priv.pem" -new -x509 -days 36500 -sha512 -section req_rootCA -extensions x509_rootCA -out "/home/user/Desktop/ssh/certificates/rootCA/rootCA.crt" -passout pass:"******" -passin pass:"******" --batch
            # #

            [ x509_rootCA ]
            subjectKeyIdentifier            = hash
            authorityKeyIdentifier          = keyid:always,issuer
            basicConstraints                = critical, CA:true
            keyUsage                        = critical, digitalSignature, cRLSign, keyCertSign
            nsComment                       = "OrgName RootCA Certificate Authority"
            issuerAltName                   = issuer:copy

# #
#   Domain > PKCS#10 Certificate Request
#   
#   Configures the openssl req command
#   called via openssl req -section req_bitlocker
# #

[ req_bitlocker ]
default_bits                    = 4096
default_keyfile                 = 9d.key.main-01.enc.priv.pem
default_md                      = sha512
default_crl_days                = 36500
default_days                    = 36500
string_mask                     = MASK:0x2002
utf8                            = yes
prompt                          = no
distinguished_name              = dn_bitlocker
req_extensions                  = x509_bitlocker
x509_extensions                 = x509_bitlocker

            # #
            #   Domain > Distinguished Name - Defaults
            #   
            #   <https://en.wikipedia.org/wiki/Certificate_signing_request>
            # #

            [ dn_bitlocker ]
            countryName                     = NA
            stateOrProvinceName             = NA
            localityName                    = NA
            organizationName                = OrgName
            organizationalUnitName          = OrgName Encryption Services
            commonName                      = OrgName Encryption RSA 4096
            emailAddress                    = system@domain.local
            description                     = OrgName Encryption Certificate RSA 4096
            givenName                       = OrgName Encryption Authority
            title                           = domain.local
            initials                        = 001-ssl-encrypt

            # #
            #   Extensions for client certificates (`man x509v3_config`)
            #   
            #   this should be called when you are ready to sign the CSR with the rootCA
            #   
            #   executed from bash script with command
            #       openssl ca -config "/home/user/Desktop/ssh/certificates/rootCA/rootCA.cnf" -multivalue-rdn -preserveDN -extensions x509_bitlocker -days 36500 -notext -md sha512 -in "/home/user/Desktop/ssh/certificates/domain/domain.csr" -out "/home/user/Desktop/ssh/certificates/domain/domain.crt" -passin pass:"******" -batch
            # #

            # #
            #   nsCertType      client, server, email, objsign, reserved, sslCA, emailCA, objCA
            #   keyUsage        digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment, keyAgreement, keyCertSign, cRLSign, encipherOnly, and decipherOnly.
            #   
            #   extendedKeyUsage
            #       serverAuth              SSL/TLS WWW Server Authentication
            #       clientAuth              SSL/TLS WWW Client Authentication
            #       codeSigning             Code Signing
            #       emailProtection         E-mail Protection (S/MIME)
            #       timeStamping            Trusted Timestamping
            #       OCSPSigning             OCSP Signing
            #       ipsecIKE                Ipsec Internet Key Exchange
            #       msCodeInd               Microsoft Individual Code Signing (authenticode)
            #       msCodeCom               Microsoft Commercial Code Signing (authenticode)
            #       msCTLSign               Microsoft Trust List Signing
            #       msEFS                   Microsoft Encrypted File System
            #   
            #   nsBaseUrl                   Base URL for all others URL addresses 
            #   nsSslServerName             SSL Server Name
            #   nsCaPolicyUrl               Link where the CA policy can be found
            #   nsRenewalUrl                Link where the certificate can be renewed
            #   nsCaRevocationUrl           Link where to download the latest Certificate (Revocation List (CRL))
            #   nsRevocationUrl             Link where to revoke the certificate
            #   issuerAltName               Link where we can get the issuer certificate
            #   nsComment                   Displayed in Netscape's comment listbox. 
            #   certificatePolicies         Should not be enabled for Certificate Authority (CA)
            #   crlDistributionPoints       Link where to get the latest CRL
            # #

            [ x509_bitlocker ]
            subjectKeyIdentifier            = hash
            basicConstraints                = critical, CA:false, pathlen:0
            # nsCertType                    = sslCA, objsign, objCA
            nsBaseUrl                       = "http://ssl.domain.local/"
            nsSslServerName                 = *.localhost
            nsCaPolicyUrl                   = "http://ssl.domain.local/policy.php"
            nsRenewalUrl                    = ""
            nsCaRevocationUrl               = "http://ssl.domain.local/rootCA.crl"
            nsRevocationUrl                 = "http://ssl.domain.local/rootCA.crl"
            nsComment                       = "OrgName Encryption Certificate [9D]"
            issuerAltName                   = URI:https://ssl.domain.local/rootCA.crt
            subjectAltName                  = @sans
            keyUsage                        = critical,nonRepudiation, keyEncipherment, dataEncipherment, keyAgreement
            extendedKeyUsage                = critical,serverAuth, clientAuth, emailProtection, msSGC, msEFS, msEFSR, nsSGC, msEFSRecovery, driveEncryption, driveRecovery, msSmartcardLogin, secureShellClient, secureShellServer, rda, gpgUsageCert, gpgUsageSign, gpgUsageEncr, gpgUsageAuth, msAuthenticode
            certificatePolicies             = @policies_domain_policy
            crlDistributionPoints           = URI:http://ssl.domain.local/rootCA.crl,URI:http://ssl.domain.local/rootCA.crl.pem
            authorityInfoAccess             = OCSP;URI:http://ssl.domain.local/ocsp, caIssuers;URI:http://ssl.domain.local/rootCA.crt

# #
#   CERTIFICATE AUTHORITY (INTERMEDIATE)
#
#   should be called if you have an intermediate certificate authority
#       openssl ca -config "certificates/rootCA/rootCA.cnf" -extensions v3_intermediate_ca -days 36500 -notext -md sha512 -in "certificates/domain/domain.csr" -out "certificates/domain/domain.csr.signed.crt"
#   
#   an entity that can sign certificates on behalf of the root CA.
#   The root CA signs the intermediate certificate, forming a chain of trust.
#  
#   The purpose of using an intermediate CA is primarily for security. The root key can be kept offline
#   and used as infrequently as possible. If the intermediate key is compromised, the root CA can revoke
#   the intermediate certificate and create a new intermediate cryptographic pair.
#   
#   We will be signing certificates using our intermediate CA. You can use these signed certificates
#   in a variety of situations, such as to secure connections to a web server or to authenticate 
#   clients connecting to a service.
# #

[ v3_intermediate_ca ]
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid:always,issuer
basicConstraints                = critical, CA:true, pathlen:0
keyUsage                        = critical, digitalSignature, cRLSign, keyCertSign
nsComment                       = "OrgName Intermediate CA"

# #
#   OCSP signing certificates
# #

[ ocsp ]
basicConstraints                = CA:FALSE
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid,issuer
keyUsage                        = critical, digitalSignature
extendedKeyUsage                = critical, OCSPSigning

# #
#   Policies
#
#   2.23.140.1.2.1              domain validation
# #

[ policies_domain_policy ]
policyIdentifier                = 2.23.140.1.2.1
CPS.1                           = "https://ssl.domain.local/cps/"
userNotice.1                    = @policies_domain_notice

[ policies_domain_notice ]
explicitText                    = "Domain Validation Certificate"
organization                    = "OrgName Root CA"

# #
#   See document "US DoD X.509 Certificate Policy", section 1.2.
#   hint: https://iase.disa.mil/pki-pke/Documents/unclass-dod_pki_fisv3.pdf
# #

[ policies_secure_policy ]
policyIdentifier                = 2.16.840.1.101.2.1.11.19
userNotice.1                    = @policies_secure_notice

[ policies_secure_notice ]
explicitText                    = "US DoD X.509 Certificate Policy - section 1.2"
organization                    = "US DoD X.509 Certificate Policy"
noticeNumbers                   = 19

# #
#   Subject Alternative Name(s) (SAN)
#
#   *.localhost required for programs like Duplicati
# #

[ sans ]
IP.0                            = XX.XX.XX.XX
IP.1                            = 127.0.0.1
DNS.0                           = domain.local
DNS.1                           = www.domain.local
DNS.2                           = *.domain.local
DNS.3                           = domain.localhost
DNS.4                           = *.domain.localhost
email.0                         = system@domain.local