# #
#   OpenSSL Certificate Generator
#
#   Tested with OpenSSL 3.0.13
#   
#   This is a utility which allows you to generate multiple types of certificates on your Linux system:
#   
#       Root Certificate Authority
#           Signs all certificates
#       Domain Authority
#           SSL certificate for websites
#       Authentication Authority
#           SSH authentication cert and keys
#       Encryption Authority
#           Bitlocker & EFS encryption cert and keys
#   
#   After a successful run, you should have the following structure:
#       
#       📁 certificates
#           📁 rootCA
#               📁 certs
#               📁 crl
#                  📄 9a.crl
#                  📄 9a.crl.pem
#                  📄 9d.crl
#                  📄 9d.crl.pem
#                  📄 domain.crl
#                  📄 domain.crl.pem
#                  📄 rootCA.crl
#                  📄 rootCA.crl.pem
#               📁 generated
#                  📄 00.pem
#                  📄 01.pem
#                  📄 02.pem
#               📄 crlnumber
#               📄 crlnumber.old
#               📄 certs.db
#               📄 certs.db.attr
#               📄 certs.db.old
#               📄 rootCA.cnf
#               📄 rootCA.crt
#               📄 rootCA.key.main-01.enc.priv.pem
#               📄 rootCA.key.main-01.unc.priv.pem
#               📄 rootCA.key.rsa.enc.priv.pem
#               📄 rootCA.key.rsa.pub.pem
#               📄 rootCA.key.rsa.unc.priv.pem
#               📄 rootCA.pfx
#               📄 serial
#               📄 serial.old
#           📁 domain
#               📄 domain.crt
#               📄 domain.csr
#               📄 domain.key.main-01.enc.priv.pem
#               📄 domain.key.main-01.unc.priv.pem
#               📄 domain.key.main-02.enc.priv.pem
#               📄 domain.key.main-02.unc.priv.pem
#               📄 domain.key.openssh.pub
#               📄 domain.key.openssh.priv.pem
#               📄 domain.key.openssh.priv.nopwd.pem
#               📄 domain.key.rsa.priv.pem
#               📄 domain.key.rsa.pub.pem
#               📄 domain.keycert.main-01.enc.priv.pem
#               📄 domain.keycert.main-01.unc.priv.pem
#               📄 domain.keystore.base64.pfx
#               📄 domain.keystore.normal.pfx
#               📄 domain.fullchain.crt
#           📁 auth
#               📄 9a.crt
#               📄 9a.csr
#               📄 9a.key.main-01.enc.priv.pem
#               📄 9a.key.main-01.unc.priv.pem
#               📄 9a.key.main-02.enc.priv.pem
#               📄 9a.key.main-02.unc.priv.pem
#               📄 9a.key.openssh.pub
#               📄 9a.key.openssh.priv.pem
#               📄 9a.key.openssh.priv.nopwd.pem
#               📄 9a.key.rsa.priv.pem
#               📄 9a.key.rsa.pub.pem
#               📄 9a.keycert.main-01.enc.priv.pem
#               📄 9a.keycert.main-01.unc.priv.pem
#               📄 9a.keystore.base64.pfx
#               📄 9a.keystore.normal.pfx
#               📄 9a.fullchain.crt
#           📁 bitlocker
#               📄 9d.crt
#               📄 9d.csr
#               📄 9d.key.main-01.enc.priv.pem
#               📄 9d.key.main-01.unc.priv.pem
#               📄 9d.key.main-02.enc.priv.pem
#               📄 9d.key.main-02.unc.priv.pem
#               📄 9d.key.openssh.pub
#               📄 9d.key.openssh.priv.pem
#               📄 9d.key.openssh.priv.nopwd.pem
#               📄 9d.key.rsa.priv.pem
#               📄 9d.key.rsa.pub.pem
#               📄 9d.keycert.main-01.enc.priv.pem
#               📄 9d.keycert.main-01.unc.priv.pem
#               📄 9d.keystore.base64.pfx
#               📄 9d.keystore.normal.pfx
#               📄 9d.fullchain.crt
#       📄 generate.sh
#   
#   ―― KEY TYPES ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
#   
#       -----BEGIN RSA PRIVATE KEY-----			    PKCS1 private key (unencrypted)             openssl rsa -in "key.main-01.unc.priv.pem" -out "key.main-01.unc.rsa.priv.pem" -traditional
#       -----BEGIN RSA PRIVATE KEY-----			    PKCS1 private key (encrypted)               openssl rsa -in "key.main-01.unc.priv.pem" -out "key.rsa.enc.priv.pem" -traditional -aes256 -passout "pass:${PWD_OUT}" -passin "pass:${PWD_IN}"
#       -----BEGIN PRIVATE KEY-----			        PKCS8 (unencrypted)                         openssl rsa -in "key.main-01.enc.priv.pen" -out "key.main-01.unc.priv.pem" -passin "pass:${PWD_IN}" -passout "pass:${PWD_OUT}"
#       -----BEGIN ENCRYPTED PRIVATE KEY-----		PKCS8 (encrypted)                           openssl genpkey -aes256 -algorithm RSA -pkeyopt rsa_keygen_bits:4096 -out "key.main-01.enc.priv.pem"
#                                                   PKCS12 (.p12 / .pfx keystore)               openssl pkcs12 -export -name "CompanyName Certificate Authority" -in "rootCA.crt" -inkey "key.main-01.enc.priv.pem" -out "certificates/rootCA/rootCA.pfx"
#   
#   ―― SETUP ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
#   
#       To start using this script, execute the following commands:
#   
#       sudo chmod +x generate.sh
#       generate --new --pass "abc"
#   
#   ―― EXAMPLES  ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
#   
#       Use any of the following:
#   
#       generate --new --pass "abc"
#       generate --new --pass "abc" --algorithm "ecc" || "rsa"
#       generate --new --pass "abc" --algorithm "rsa"
#       generate --new --pass "abc" --algorithm "ecc" --homeFolder "/path/to/certs"
#       generate --new --pass "abc" --algorithm "ecc" --config "rootCA-ecc.cnf" --name "Domain.local"
#       generate --new --pass "abc" --algorithm "ecc" --config "rootCA-ecc.cnf" --homeFolder "/path/to/certs" --domainFolder "domain.local"
#       generate --new --pass "abc" --passin "abc" --passout "abc" --algorithm "ecc" --homeFolder "/path/to/certs" --domainFolder "domain.local"
#       generate --new --pass "abc" --passin "abc" --passout "abc" --algorithm "ecc" --name "Domain.local"
#       generate --new --pass "abc" --passin "abc" --passout "abc" --algorithm "ecc" --curve "secp521r1" --name "Domain.local"
#       generate --vars
#       generate --wipe
#       generate --clean
#       generate --help
#   
#   ―― EXISTING MODE -――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
#   
#       Existing mode will check to see if you already have private keys in the folders used
#       to generate keys/certs.
#
#       The existing private keys will be used to generate new public keys and certificates
#       instead of generating new private keys.
#
#       To use this mode, existing private keys must exist
#
#       generate --name "Domain.local" 
#
#   ―― MIXED MODE -――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――-――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
#   
#       Mixed mode generates rootCA in RSA-4096 and then all subkeys / certs with ECC-384
#       generate --new --pass "abc" --passin "abc" --passout "abc" --mixed
#
#   ―― GENERATE NEW ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
#   
#       Use the following command to generate new keys / certificates without any previous keys.
#       generate --new  --name "YourCompany" --pass "PASSWORD"
#   
#   ―― Use Existing Private Keys ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
#   
#       Make sure you have placed your private keys (main-01.enc.priv.pem) inside:
#           - certificates/rootCA
#           - certificates/domain
#   
#       generate --name "YourCompany" --pass "PASSWORD" --passout "PASSOUT"
#
#   ―― NOTES ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
#
#       As of OpenSSL version 3.0 and later, the -traditional flag is required to get a
#       PKCS#1 RSA PRIVATE KEY format because OpenSSL has adopted PKCS#8 as the default standard.
# #

#!/bin/bash
PATH="/bin:/usr/bin:/sbin:/usr/sbin:/home/${USER}/bin"
echo
set -f

# #
#   vars > colors
#
#   Use the color table at:
#       - https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797
# #

END=$'\e[0m'
WHITE=$'\e[97m'
BOLD=$'\e[1m'
DIM=$'\e[2m'
UNDERLINE=$'\e[4m'
BLINK=$'\e[5m'
INVERTED=$'\e[7m'
HIDDEN=$'\e[8m'
BLACK=$'\e[38;5;0m'
FUCHSIA1=$'\e[38;5;205m'
FUCHSIA2=$'\e[38;5;198m'
RED=$'\e[38;5;160m'
RED2=$'\e[38;5;196m'
ORANGE=$'\e[38;5;202m'
ORANGE2=$'\e[38;5;208m'
MAGENTA=$'\e[38;5;5m'
BLUE=$'\e[38;5;033m'
BLUE2=$'\e[38;5;39m'
BLUE3=$'\e[38;5;68m'
CYAN=$'\e[38;5;51m'
GREEN=$'\e[38;5;2m'
GREEN2=$'\e[38;5;76m'
YELLOW=$'\e[38;5;184m'
YELLOW2=$'\e[38;5;190m'
YELLOW3=$'\e[38;5;193m'
GREY1=$'\e[38;5;240m'
GREY2=$'\e[38;5;244m'
GREY3=$'\e[38;5;250m'
NAVY=$'\e[38;5;62m'
OLIVE=$'\e[38;5;144m'
PEACH=$'\e[38;5;210m'

# #
#   define > colors
#
#   Use the color table at:
#       - https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797
# #

declare -A c=(
    end $'\e[0m'
    white $'\e[97m'
    bold $'\e[1m'
    dim $'\e[2m'
    underline $'\e[4m'
    strike $'\e[9m'
    blink $'\e[5m'
    inverted $'\e[7m'
    hidden $'\e[8m'
    black $'\e[38;5;0m'
    fuchsia1 $'\e[38;5;205m'
    fuchsia2 $'\e[38;5;198m'
    red $'\e[38;5;160m'
    red2 $'\e[38;5;196m'
    orange $'\e[38;5;202m'
    orange2 $'\e[38;5;208m'
    magenta $'\e[38;5;5m'
    blue $'\e[38;5;033m'
    blue2 $'\e[38;5;033m'
    blue3 $'\e[38;5;68m'
    cyan $'\e[38;5;51m'
    green $'\e[38;5;2m'
    green2 $'\e[38;5;76m'
    yellow $'\e[38;5;184m'
    yellow2 $'\e[38;5;190m'
    yellow3 $'\e[38;5;193m'
    grey1 $'\e[38;5;240m'
    grey2 $'\e[38;5;244m'
    grey3 $'\e[38;5;250m'
    navy $'\e[38;5;62m'
    olive $'\e[38;5;144m'
    peach $'\e[38;5;204m'
)

# #
#   unicode for emojis
#       https://apps.timwhitlock.info/emoji/tables/unicode
# #

declare -A icon=(
    "symbolic link" $'\xF0\x9F\x94\x97' # 🔗
    "regular file" $'\xF0\x9F\x93\x84' # 📄
    "directory" $'\xF0\x9F\x93\x81' # 📁
    "regular empty file" $'\xe2\xad\x95' # ⭕
    "log" $'\xF0\x9F\x93\x9C' # 📜
    "1" $'\xF0\x9F\x93\x9C' # 📜
    "2" $'\xF0\x9F\x93\x9C' # 📜
    "3" $'\xF0\x9F\x93\x9C' # 📜
    "4" $'\xF0\x9F\x93\x9C' # 📜
    "5" $'\xF0\x9F\x93\x9C' # 📜
    "pem" $'\xF0\x9F\x94\x92' # 🔑
    "pub" $'\xF0\x9F\x94\x91' # 🔒
    "pfx" $'\xF0\x9F\x94\x92' # 🔑
    "p12" $'\xF0\x9F\x94\x92' # 🔑
    "key" $'\xF0\x9F\x94\x91' # 🔒
    "crt" $'\xF0\x9F\xAA\xAA ' # 🪪
    "gz" $'\xF0\x9F\x93\xA6' # 📦
    "zip" $'\xF0\x9F\x93\xA6' # 📦
    "gzip" $'\xF0\x9F\x93\xA6' # 📦
    "deb" $'\xF0\x9F\x93\xA6' # 📦
    "sh" $'\xF0\x9F\x97\x94' # 🗔
)

# #
#   Algorithm List
# #

declare -A ALGOS
ALGOS["id-ecPublicKey"]="ECC"
ALGOS["rsaEncryption"]="RSA"

# #
#   distro
#
#   returns distro information.
# #

    # #
    #   freedesktop.org and systemd
    # #

        if [ -f /etc/os-release ]; then
            . /etc/os-release
            sys_os=$NAME
            sys_os_ver=$VERSION_ID

    # #
    #   linuxbase.org
    # #

        elif type lsb_release >/dev/null 2>&1; then
            sys_os=$(lsb_release -si)
            sys_os_ver=$(lsb_release -sr)

    # #
    #   versions of Debian/Ubuntu without lsb_release cmd
    # #

        elif [ -f /etc/lsb-release ]; then
            . /etc/lsb-release
            sys_os=$DISTRIB_ID
            sys_os_ver=$DISTRIB_RELEASE

    # #
    #   older Debian/Ubuntu/etc distros
    # #

        elif [ -f /etc/debian_version ]; then
            sys_os=Debian
            sys_os_ver=$(cat /etc/debian_version)

    # #
    #   fallback: uname, e.g. "Linux <version>", also works for BSD
    # #

        else
            sys_os=$(uname -s)
            sys_os_ver=$(uname -r)
        fi

# #
#   define > system
# #

sys_arch=$(dpkg --print-architecture)
sys_code=$(lsb_release -cs)

# #
#   define > app
# #

app_title="OCG"
app_about="A script to generate SSL certificates using OpenSSL"
app_ver=("1" "1" "0" "0")
app_dir_this_script="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"    # path where script was last found in
app_dir_this_called="${PWD}"                                                            # the path where script is called from
app_file_this=$(basename "$0")                                                          # ports-block.sh (with ext)

# #
#   define > repo
# #

app_repo_author="Aetherinox"
app_repo_name="ssl-cert-generator"
app_repo_branch="main"
app_repo_url="https://github.com/${app_repo_author}/${app_repo_name}"

# #
#   print an error and exit with failure
#   $1: error message
# #

function error()
{
    echo -e "  ⭕ ${c[grey2]}${app_file_this}${c[end]}: \n     ${c[bold]}${c[red]}Error${c[end]}: ${c[end]}$1"
    echo -e
    exit 0
}

# #
#   Check Sudo
#
#	this script requires permissions to copy, etc.
# 	require the user to run as sudo
# #

check_sudo()
{
	if [ "$EUID" -ne 0 ]; then
        echo -e 
        echo -e "  ${c[orange]}WARNING         ${c[end]}Must run script with ${c[yellow2]}sudo.${c[end]}"
        echo -e
        echo -e "                  You may re-initialize this script using sudo with the command:${c[end]}"
        echo -e "                       ${c[grey1]}sudo ${c[fuchsia2]}./${app_dir_this_script}/${app_file_this} ${c[grey1]}${c[end]}"
        echo -e

        exec sudo $0 "$@"
	fi
}

# #
#   func > version > compare greater than
#
#   this function compares two versions and determines if an update may
#   be available. or the user is running a lesser version of a program.
# #

get_version_compare_gt()
{
    test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1";
}

# #
#   func > get version
#
#   returns current version of app
#   converts to human string.
#       e.g.    "1" "2" "4" "0"
#               1.2.4.0
# #

get_version()
{
    ver_join=${app_ver[@]}
    ver_str=${ver_join// /.}
    echo ${ver_str}
}

# #
#   OpenSSH Extensions & Sections
# #

EXTENSION_ROOT=x509_rootCA
EXTENSION_DOMAIN=x509_domain
EXTENSION_AUTH=x509_9a_auth
EXTENSION_BITLOCKER=x509_bitlocker
SECTION_ROOT=req_rootCA
SECTION_DOMAIN=req_domain
SECTION_AUTH=req_9a_auth
SECTION_BITLOCKER=req_bitlocker

# #
#   Private key headers
# #

HEADER_RSA_PRIV_ENC="BEGIN ENCRYPTED PRIVATE KEY"
HEADER_RSA_PRIV_UNC="BEGIN PRIVATE KEY"
HEADER_ECC_PRIV_UNC="BEGIN EC PRIVATE KEY"

# #
#   DEFINE > Language
# #

LNG_STEP_CHECK_INTEGRITY="Integrity"
LNG_STEP_FOLDER_CREATE="Create"
LNG_STEP_FILE_CREATE="Create"
LNG_STEP_FILE_DELETE="Delete File"
LNG_STEP_FILE_REMOVE="Remove"
LNG_STEP_CERTS="Certs"
LNG_STEP_ATTRIBS="Attributes"
LNG_STEP_CHAIN_CREATE="Create Chain"
LNG_STEP_SERIAL_RESET="Reset Serial"
LNG_STEP_CRL_RESET="Reset CRL"

# #
#   DEFINE > Folders
# #

FOLDER_CERTS=certificates
FOLDER_ROOTCA=rootCA
FOLDER_DOMAIN=domain
FOLDER_AUTH=auth
FOLDER_BITLOCKER=bitlocker
FOLDER_ROOT_SUB_CERTS=certs
FOLDER_ROOT_SUB_CRL=crl
FOLDER_ROOT_SUB_GEN=generated

# #
#   DEFINE > Files
# #

FILE_ROOTCA_BASE=rootCA
FILE_DOMAIN_BASE=domain
FILE_AUTH_BASE=9a
FILE_BITLOCKER_BASE=9d
FILE_ROOTCA_DB=certs
FILE_ROOTCA_CRLNUMBER=crlnumber
FILE_ROOTCA_SERIAL=serial
FILE_ROOTCA_CNF=rootCA
FILE_BITLOCKER_CNF=bitlocker

# #
#   Arg Tracking
# #

_PASS_IMPORT=false

# #
#   DEFINE > Paths
#
#   ROOTCA              path / folder for rootCA certs and keys
#   DOMAIN              path / folder to place domain level certificates, signed by rootCA
#   AUTH                path / folder to place auth certs and keys; utilized for SSH, etc. No usage restrictions. Also classified as 9A
#   BITLOCKER           path / folder to place auth certs and keys; utilized for Bitlocker / EFS, etc. No usage restrictions. Also classified as 9D
# #

PATH_CERTS=${PWD}/${FOLDER_CERTS}                                                       # /home/USER/Desktop/ssh/certificates
PATH_ROOTCA=${PATH_CERTS}/${FOLDER_ROOTCA}                                              # /home/USER/Desktop/ssh/certificates/rootCA
PATH_ROOTCA_SUB_CRL=${PATH_CERTS}/${FOLDER_ROOTCA}/${FOLDER_ROOT_SUB_CRL}               # /home/USER/Desktop/ssh/certificates/rootCA/crl
PATH_ROOTCA_SUB_GEN=${PATH_CERTS}/${FOLDER_ROOTCA}/${FOLDER_ROOT_SUB_GEN}               # /home/USER/Desktop/ssh/certificates/rootCA/generated
PATH_ROOTCA_SUB_CERTS=${PATH_CERTS}/${FOLDER_ROOTCA}/${FOLDER_ROOT_SUB_CERTS}           # /home/USER/Desktop/ssh/certificates/rootCA/certs
PATH_ROOTCA_BASE=${PATH_ROOTCA}/${FILE_ROOTCA_BASE}                                     # /home/USER/Desktop/ssh/certificates/rootCA/rootCA.*
PATH_DOMAIN=${PATH_CERTS}/${FOLDER_DOMAIN}                                              # /home/USER/Desktop/ssh/certificates/domain
PATH_DOMAIN_BASE=${PATH_DOMAIN}/${FILE_DOMAIN_BASE}                                     # /home/USER/Desktop/ssh/certificates/domain/domain.*
PATH_AUTH=${PATH_CERTS}/${FOLDER_AUTH}                                                  # /home/USER/Desktop/ssh/certificates/auth
PATH_AUTH_BASE=${PATH_AUTH}/${FILE_AUTH_BASE}                                           # /home/USER/Desktop/ssh/certificates/auth/auth.*
PATH_BITLOCKER=${PATH_CERTS}/${FOLDER_BITLOCKER}                                        # /home/USER/Desktop/ssh/certificates/bitlocker
PATH_BITLOCKER_BASE=${PATH_BITLOCKER}/${FILE_BITLOCKER_BASE}                            # /home/USER/Desktop/ssh/certificates/bitlocker/bitlocker.*

# #
#   DEFINE > Passwords
#
#   passwords can be passed using CLI parameters
#       generate --pass "Your Password"
# #

PWD_IN=""
PWD_OUT=""
PWD_RAW=""
PWD_STR=""

# #
#   DEFINE > Extensions
# #

EXT_PEM="pem"
EXT_PUB="pub"
EXT_KEY="key"
EXT_CRT="crt"
EXT_CSR="csr"
EXT_CRL="crl"
EXT_PFX="pfx"
EXT_CNF="cnf"
EXT_TXT="db"
EXT_OLD="old"
EXT_ATTR="attr"

# #
#   DEFINE > Options
# #

PARAM_COMMENT="${app_title} $(get_version)"
PARAM_FRIENDLY="Self-hosted"
PARAM_ALGORITHM=rsa
PARAM_ALGORITHM_SET=false
PARAM_DAYS=36500
PARAM_BITS=4096
PARAM_CURVE=secp384r1
PARAM_MD_ROOT=sha512
PARAM_MD_SUB=sha512
PARAM_MIXED=false
PARAM_DEV_ENABLED=false
PARAM_NEW_KEYS=false
PARAM_CNF_ROOTCA="${FILE_ROOTCA_CNF}-rsa.${EXT_CNF}"
PARAM_CNF_BITLOCKER="${FILE_BITLOCKER_CNF}-rsa.${EXT_CNF}"

# #
#   DEFINE > Key Name
# #

SSL_KEY_MAIN01_ENC="key.main-01.enc.priv.${EXT_PEM}"
SSL_KEY_MAIN01_UNC="key.main-01.unc.priv.${EXT_PEM}"
SSL_KEY_MAIN01_RSA_UNC_PRIV="key.rsa.priv.unc.${EXT_PEM}"
SSL_KEY_MAIN01_RSA_ENC_PRIV="key.rsa.priv.enc.${EXT_PEM}"
SSL_KEY_MAIN01_RSA_PUB="key.rsa.pub.${EXT_PEM}"
SSL_KEYCERT_MAIN01_ENC="keycert.main-01.enc.priv.${EXT_PEM}"
SSL_KEYCERT_MAIN01_UNC="keycert.main-01.unc.priv.${EXT_PEM}"
SSL_KEY_MAIN02_ENC="key.main-02.enc.priv.${EXT_PEM}"
SSL_KEY_MAIN02_UNC="key.main-02.unc.priv.${EXT_PEM}"
SSL_KEY_RSA_PRIV="key.rsa.priv.${EXT_PEM}"
SSL_KEY_RSA_PUB="key.rsa.pub.${EXT_PEM}"
SSL_KEY_SSH_PRIV="key.openssh.priv.${EXT_PEM}"
SSL_KEY_SSH_PRIV_NOPWD="key.openssh.priv.nopwd.${EXT_PEM}"
SSL_KEY_SSH_PUB="key.openssh.${EXT_PUB}"
SSL_CERT_FULLCHAIN="fullchain.${EXT_CRT}"
SSL_KEYSTORE_PFX="keystore.normal.${EXT_PFX}"
SSL_KEYSTORE_B64="keystore.base64.${EXT_PFX}"
SSL_EXT_CRL_PEM="${EXT_CRL}.${EXT_PEM}"

# #
#   func > version > compare greater than
#
#   this function compares two versions and determines if an update may
#   be available. or the user is running a lesser version of a program.
# #

get_version_compare_gt()
{
    test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1";
}

# #
#   func > Tree
#
#   shows an example of the files that you should have using this generator in their
#   proper structure
# #

showTree()
{
    printf '  %-5s %-40s\n' "${GREEN}Structure:${END}" "" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} 📁 ${BLUE}${FOLDER_CERTS}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} ├─ 📁 ${BLUE}${FOLDER_ROOTCA}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📁 ${BLUE}${FOLDER_ROOT_SUB_CERTS}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📁 ${BLUE}${FOLDER_ROOT_SUB_CRL}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  │  ├─ 📄 ${WHITE}${FILE_ROOTCA_BASE}.${EXT_CRL}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  │  └─ 📄 ${WHITE}${FILE_ROOTCA_BASE}.${EXT_CRL}.${EXT_PEM}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📁 ${BLUE}${FOLDER_ROOT_SUB_GEN}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  │  ├─ 📄 ${WHITE}00.${EXT_PEM}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  │  ├─ 📄 ${WHITE}01.${EXT_PEM}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  │  └─ 📄 ${WHITE}02.${EXT_PEM}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${FILE_ROOTCA_CRLNUMBER}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${FILE_ROOTCA_CRLNUMBER}.${EXT_OLD}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${FILE_ROOTCA_DB}.${EXT_TXT}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${FILE_ROOTCA_DB}.${EXT_TXT}.${EXT_ATTR}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${FILE_ROOTCA_DB}.${EXT_TXT}.${EXT_OLD}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${PARAM_CNF_ROOTCA}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${PARAM_CNF_BITLOCKER}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${FILE_ROOTCA_BASE}.${EXT_CRT}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${FILE_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${FILE_ROOTCA_BASE}.${SSL_KEY_MAIN01_UNC}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${FILE_ROOTCA_BASE}.${SSL_KEY_MAIN01_RSA_ENC_PRIV}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${FILE_ROOTCA_BASE}.${SSL_KEY_MAIN01_RSA_UNC_PRIV}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${FILE_ROOTCA_BASE}.${SSL_KEY_MAIN01_RSA_PUB}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${FILE_ROOTCA_BASE}.${EXT_PFX}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${FILE_ROOTCA_SERIAL}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  └─ 📄 ${WHITE}${FILE_ROOTCA_SERIAL}.${EXT_OLD}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} ├─ 📁 ${BLUE}${FOLDER_DOMAIN}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${FILE_DOMAIN_BASE}.${EXT_CRT}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${FILE_DOMAIN_BASE}.${EXT_CSR}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${FILE_DOMAIN_BASE}.${SSL_CERT_FULLCHAIN}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${FILE_DOMAIN_BASE}.${SSL_KEY_MAIN01_ENC}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${FILE_DOMAIN_BASE}.${SSL_KEY_MAIN01_UNC}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${FILE_DOMAIN_BASE}.${SSL_KEY_MAIN02_ENC}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${FILE_DOMAIN_BASE}.${SSL_KEY_MAIN02_UNC}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${FILE_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${FILE_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${FILE_DOMAIN_BASE}.${SSL_KEY_SSH_PUB}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${FILE_DOMAIN_BASE}.${SSL_KEYCERT_MAIN01_ENC}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${FILE_DOMAIN_BASE}.${SSL_KEYCERT_MAIN01_UNC}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  ├─ 📄 ${WHITE}${FILE_DOMAIN_BASE}.${SSL_KEYSTORE_B64}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} │  └─ 📄 ${WHITE}${FILE_DOMAIN_BASE}.${SSL_KEYSTORE_PFX}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} ├─ 📁 ${BLUE}${FOLDER_AUTH}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} ├─ 📁 ${BLUE}${FOLDER_BITLOCKER}${END}" 1>&2
    printf '  %-5s %-40s\n' "    " "${GREY3} └─ 📄 ${WHITE}${app_file_this}${END}" 1>&2
}

# #
#   Check files
# #

readStatus()
{

    echo -e
    echo -e " ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
    echo -e
    echo -e "  ${BOLD}${GREEN}COMPLETE  ${WHITE}A check has been performed to ensure your keys were generated.${END}"
    echo -e
    echo -e " ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"

    echo -e
    echo -e "  ${BLUE} 🎗️ SSL Config ${END}"
    echo -e " ${GREY1}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"

    if ( set +f; ls ${PATH_ROOTCA}/${PARAM_CNF_ROOTCA} ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_ROOTCA}/${PARAM_CNF_BITLOCKER} ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA}/${PARAM_CNF_BITLOCKER}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA}/${PARAM_CNF_BITLOCKER}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_ROOTCA}/${FILE_ROOTCA_DB}.${EXT_TXT} ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA}/${FILE_ROOTCA_DB}.${EXT_TXT}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA}/${FILE_ROOTCA_DB}.${EXT_TXT}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_ROOTCA}/${FILE_ROOTCA_CRLNUMBER} ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA}/${FILE_ROOTCA_CRLNUMBER}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA}/${FILE_ROOTCA_CRLNUMBER}${END}" "❌${END}"
    fi
    if ( set +f; ls ${PATH_ROOTCA}/${FILE_ROOTCA_SERIAL} ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA}/${FILE_ROOTCA_SERIAL}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA}/${FILE_ROOTCA_SERIAL}${END}" "❌${END}"
    fi

    echo -e
    echo -e "  ${BLUE} 🎗️ ${FILE_ROOTCA_BASE} ${END}"
    echo -e " ${GREY1}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"

    # get certificate arguments since we need them later
    if ( set +f; ls ${PATH_ROOTCA_BASE}.*${EXT_CRT}* ) 1> /dev/null 2>&1; then
        CRT_ALG=$(openssl x509 -in "${PATH_ROOTCA_BASE}.${EXT_CRT}" -noout -text | awk -F':' '/Public Key Algorithm/ {print $2}' | tr -d ' ' | sed 's/^[ \t]*//')
        CRT_BITS=$(openssl x509 -in "${PATH_ROOTCA_BASE}.${EXT_CRT}" -noout -text | awk -F':' '/Public-Key/ {print $2}' | tr -d '()' | sed 's/^[ \t]*//')
        CRT_FINGERPRINT=$(openssl x509 -in "${PATH_ROOTCA_BASE}.${EXT_CRT}" -noout -fingerprint | cut -d= -f2 | sed 's/://g' )
        CRT_SERIAL=$(openssl x509 -in "${PATH_ROOTCA_BASE}.${EXT_CRT}" -noout -serial | cut -d= -f2 | sed 's/://g' )
        CRT_CN=$(openssl x509 -in "${PATH_ROOTCA_BASE}.${EXT_CRT}" -subject -noout | grep -o 'CN = [^,]*' | cut -d '=' -f 2 | sed 's/^[ \t]*//')
        CRT_O=$(openssl x509 -in "${PATH_ROOTCA_BASE}.${EXT_CRT}" -subject -noout | grep -o 'O = [^,]*' | cut -d '=' -f 2 | sed 's/^[ \t]*//')
        CRT_OU=$(openssl x509 -in "${PATH_ROOTCA_BASE}.${EXT_CRT}" -subject -noout | grep -o 'OU = [^,]*' | cut -d '=' -f 2 | sed 's/^[ \t]*//')

        CRT_DAYS=$(date -d "$(openssl x509 -in ${PATH_ROOTCA_BASE}.${EXT_CRT} -enddate -noout | cut -d'=' -f2)" "+%s")
        DAYS_CURRENT=$(date "+%s")
        CRT_DAYS_REMAINS=$((($CRT_DAYS - $DAYS_CURRENT) / 60 / 60 / 24))
    fi

    if ( set +f; ls ${PATH_ROOTCA_BASE}.*${SSL_KEY_MAIN01_ENC}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_ROOTCA_BASE}.*${SSL_KEY_MAIN01_UNC}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_UNC}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_UNC}${END}" "❌${END}"
    fi

    if [ "${ALGOS[$CRT_ALG]}" == "RSA" ]; then
        if ( set +f; ls ${PATH_ROOTCA_BASE}.*${SSL_KEY_MAIN01_RSA_ENC_PRIV}* ) 1> /dev/null 2>&1; then
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_RSA_ENC_PRIV}${END}" "✔️${END}"
        else
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_RSA_ENC_PRIV}${END}" "❌${END}"
        fi

        if ( set +f; ls ${PATH_ROOTCA_BASE}.*${SSL_KEY_MAIN01_RSA_UNC_PRIV}* ) 1> /dev/null 2>&1; then
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_RSA_UNC_PRIV}${END}" "✔️${END}"
        else
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_RSA_UNC_PRIV}${END}" "❌${END}"
        fi

        if ( set +f; ls ${PATH_ROOTCA_BASE}.*${SSL_KEY_MAIN01_RSA_PUB}* ) 1> /dev/null 2>&1; then
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_RSA_PUB}${END}" "✔️${END}"
        else
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_RSA_PUB}${END}" "❌${END}"
        fi
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_RSA_ENC_PRIV}${END}" "⚠️ ‎ Skipped${END}"
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_RSA_UNC_PRIV}${END}" "⚠️ ‎ Skipped${END}"
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_RSA_PUB}${END}" "⚠️ ‎ Skipped${END}"
    fi

    if ( set +f; ls ${PATH_ROOTCA_BASE}.*${EXT_CRT}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_BASE}.${EXT_CRT}${END}" "✔️${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ common name .......... ${CRT_CN}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ organization ......... ${CRT_O}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳                        ${CRT_OU}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ fingerprint .......... ${CRT_FINGERPRINT}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ serial ............... ${CRT_SERIAL}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ algorithm ............ ${ALGOS[$CRT_ALG]}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ bits ................. ${CRT_BITS}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ remaining ............ ${CRT_DAYS_REMAINS} days${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_BASE}.${EXT_CRT}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_ROOTCA_BASE}.*${EXT_PFX}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_BASE}.${EXT_PFX}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_BASE}.${EXT_PFX}${END}" "❌${END}"
    fi

    echo -e
    echo -e "  ${BLUE} 🎗️ ${FILE_DOMAIN_BASE} ${END}"
    echo -e " ${GREY1}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"

    # get certificate arguments since we need them later
    if ( set +f; ls ${PATH_DOMAIN_BASE}.*${EXT_CRT}* ) 1> /dev/null 2>&1; then
        CRT_ALG=$(openssl x509 -in "${PATH_DOMAIN_BASE}.${EXT_CRT}" -noout -text | awk -F':' '/Public Key Algorithm/ {print $2}' | tr -d ' ' | sed 's/^[ \t]*//')
        CRT_BITS=$(openssl x509 -in "${PATH_DOMAIN_BASE}.${EXT_CRT}" -noout -text | awk -F':' '/Public-Key/ {print $2}' | tr -d '()' | sed 's/^[ \t]*//')
        CRT_FINGERPRINT=$(openssl x509 -in "${PATH_DOMAIN_BASE}.${EXT_CRT}" -noout -fingerprint | cut -d= -f2 | sed 's/://g' )
        CRT_SERIAL=$(openssl x509 -in "${PATH_DOMAIN_BASE}.${EXT_CRT}" -noout -serial | cut -d= -f2 | sed 's/://g' )
        CRT_CN=$(openssl x509 -in "${PATH_DOMAIN_BASE}.${EXT_CRT}" -subject -noout | grep -o 'CN = [^,]*' | cut -d '=' -f 2 | sed 's/^[ \t]*//')
        CRT_O=$(openssl x509 -in "${PATH_DOMAIN_BASE}.${EXT_CRT}" -subject -noout | grep -o 'O = [^,]*' | cut -d '=' -f 2 | sed 's/^[ \t]*//')
        CRT_OU=$(openssl x509 -in "${PATH_DOMAIN_BASE}.${EXT_CRT}" -subject -noout | grep -o 'OU = [^,]*' | cut -d '=' -f 2 | sed 's/^[ \t]*//')

        CRT_DAYS=$(date -d "$(openssl x509 -in ${PATH_DOMAIN_BASE}.${EXT_CRT} -enddate -noout | cut -d'=' -f2)" "+%s")
        DAYS_CURRENT=$(date "+%s")
        CRT_DAYS_REMAINS=$((($CRT_DAYS - $DAYS_CURRENT) / 60 / 60 / 24))
    fi

    if ( set +f; ls ${PATH_DOMAIN_BASE}.*${SSL_KEY_MAIN01_ENC}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_ENC}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_ENC}${END}" "❌${END}"
    fi
    if ( set +f; ls ${PATH_DOMAIN_BASE}.*${SSL_KEY_MAIN01_UNC}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_UNC}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_UNC}${END}" "❌${END}"
    fi
    if ( set +f; ls ${PATH_DOMAIN_BASE}.*${EXT_CSR}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${EXT_CSR}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${EXT_CSR}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_DOMAIN_BASE}.*${EXT_CRT}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${EXT_CRT}${END}" "✔️${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ common name .......... ${CRT_CN}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ organization ......... ${CRT_O}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳                        ${CRT_OU}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ fingerprint .......... ${CRT_FINGERPRINT}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ serial ............... ${CRT_SERIAL}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ algorithm ............ ${ALGOS[$CRT_ALG]}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ bits ................. ${CRT_BITS}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ remaining ............ ${CRT_DAYS_REMAINS} days${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${EXT_CRT}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_PFX}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_PFX}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_PFX}${END}" "❌${END}"
    fi
    if ( set +f; ls ${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_B64}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_B64}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_B64}${END}" "❌${END}"
    fi
    if ( set +f; ls ${PATH_DOMAIN_BASE}.${SSL_KEYCERT_MAIN01_ENC}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${SSL_KEYCERT_MAIN01_ENC}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${SSL_KEYCERT_MAIN01_ENC}${END}" "❌${END}"
    fi
    if ( set +f; ls ${PATH_DOMAIN_BASE}.${SSL_KEYCERT_MAIN01_UNC}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${SSL_KEYCERT_MAIN01_UNC}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${SSL_KEYCERT_MAIN01_UNC}${END}" "❌${END}"
    fi
    if ( set +f; ls ${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN02_ENC}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN02_ENC}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN02_ENC}${END}" "❌${END}"
    fi
    if ( set +f; ls ${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN02_UNC}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN02_UNC}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN02_UNC}${END}" "❌${END}"
    fi

    if [ "${PARAM_MIXED}" == "false" ] && [ "${PARAM_ALGORITHM}" == "rsa" ]; then
        if ( set +f; ls ${PATH_DOMAIN_BASE}.${SSL_KEY_RSA_PRIV}* ) 1> /dev/null 2>&1; then
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${SSL_KEY_RSA_PRIV}${END}" "✔️${END}"
        else
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${SSL_KEY_RSA_PRIV}${END}" "❌${END}"
        fi
    fi

    if [ "${PARAM_MIXED}" == "false" ] && [ "${PARAM_ALGORITHM}" == "rsa" ]; then
        if ( set +f; ls ${PATH_DOMAIN_BASE}.${SSL_KEY_RSA_PUB}* ) 1> /dev/null 2>&1; then
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${SSL_KEY_RSA_PUB}${END}" "✔️${END}"
        else
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${SSL_KEY_RSA_PUB}${END}" "❌${END}"
        fi
    fi

    if ( set +f; ls ${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PUB}* ) 1> /dev/null 2>&1; then
        thumbprint=$(ssh-keygen -lf "${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PUB}")
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PUB}${END}" "✔️${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ ${thumbprint}${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PUB}${END}" "❌${END}"
    fi

    if [ -n "$PWD_RAW" ] && (( ${#PWD_RAW} > 4 )) ; then
        if ( set +f; ls ${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV}* ) 1> /dev/null 2>&1; then
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV}${END}" "✔️${END}"
        else
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV}${END}" "❌${END}"
        fi
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}${END}" "⚠️ ‎ Skipped${END}"
    fi

    if ( set +f; ls ${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}* ) 1> /dev/null 2>&1; then
        thumbprint=$(ssh-keygen -lf "${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}")
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}${END}" "✔️${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ ${thumbprint}${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_DOMAIN}/${FILE_DOMAIN_BASE}.${SSL_CERT_FULLCHAIN}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN}/${FILE_DOMAIN_BASE}.${SSL_CERT_FULLCHAIN}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_DOMAIN}/${FILE_DOMAIN_BASE}.${SSL_CERT_FULLCHAIN}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_ROOTCA_SUB_CRL}/${FILE_DOMAIN_BASE}.${SSL_EXT_CRL_PEM}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_SUB_CRL}/${FILE_DOMAIN_BASE}.${SSL_EXT_CRL_PEM}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_SUB_CRL}/${FILE_DOMAIN_BASE}.${SSL_EXT_CRL_PEM}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_ROOTCA_SUB_CRL}/${FILE_DOMAIN_BASE}.${EXT_CRL}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_SUB_CRL}/${FILE_DOMAIN_BASE}.${EXT_CRL}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_SUB_CRL}/${FILE_DOMAIN_BASE}.${EXT_CRL}${END}" "❌${END}"
    fi

    echo -e
    echo -e "  ${BLUE} 🎗️ ${FILE_AUTH_BASE} ${END}"
    echo -e " ${GREY1}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"

    # get certificate arguments since we need them later
    if ( set +f; ls ${PATH_AUTH_BASE}.*${EXT_CRT}* ) 1> /dev/null 2>&1; then
        CRT_ALG=$(openssl x509 -in "${PATH_AUTH_BASE}.${EXT_CRT}" -noout -text | awk -F':' '/Public Key Algorithm/ {print $2}' | tr -d ' ' | sed 's/^[ \t]*//')
        CRT_BITS=$(openssl x509 -in "${PATH_AUTH_BASE}.${EXT_CRT}" -noout -text | awk -F':' '/Public-Key/ {print $2}' | tr -d '()' | sed 's/^[ \t]*//')
        CRT_FINGERPRINT=$(openssl x509 -in "${PATH_AUTH_BASE}.${EXT_CRT}" -noout -fingerprint | cut -d= -f2 | sed 's/://g' )
        CRT_SERIAL=$(openssl x509 -in "${PATH_AUTH_BASE}.${EXT_CRT}" -noout -serial | cut -d= -f2 | sed 's/://g' )
        CRT_CN=$(openssl x509 -in "${PATH_AUTH_BASE}.${EXT_CRT}" -subject -noout | grep -o 'CN = [^,]*' | cut -d '=' -f 2 | sed 's/^[ \t]*//')
        CRT_O=$(openssl x509 -in "${PATH_AUTH_BASE}.${EXT_CRT}" -subject -noout | grep -o 'O = [^,]*' | cut -d '=' -f 2 | sed 's/^[ \t]*//')
        CRT_OU=$(openssl x509 -in "${PATH_AUTH_BASE}.${EXT_CRT}" -subject -noout | grep -o 'OU = [^,]*' | cut -d '=' -f 2 | sed 's/^[ \t]*//')

        CRT_DAYS=$(date -d "$(openssl x509 -in ${PATH_AUTH_BASE}.${EXT_CRT} -enddate -noout | cut -d'=' -f2)" "+%s")
        DAYS_CURRENT=$(date "+%s")
        CRT_DAYS_REMAINS=$((($CRT_DAYS - $DAYS_CURRENT) / 60 / 60 / 24))
    fi

    if ( set +f; ls ${PATH_AUTH_BASE}.*${SSL_KEY_MAIN01_ENC}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEY_MAIN01_ENC}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEY_MAIN01_ENC}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_AUTH_BASE}.*${SSL_KEY_MAIN01_UNC}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEY_MAIN01_UNC}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEY_MAIN01_UNC}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_AUTH_BASE}.*${EXT_CSR}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${EXT_CSR}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${EXT_CSR}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_AUTH_BASE}.*${EXT_CRT}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${EXT_CRT}${END}" "✔️${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ common name .......... ${CRT_CN}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ organization ......... ${CRT_O}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳                        ${CRT_OU}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ fingerprint .......... ${CRT_FINGERPRINT}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ serial ............... ${CRT_SERIAL}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ algorithm ............ ${ALGOS[$CRT_ALG]}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ bits ................. ${CRT_BITS}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ remaining ............ ${CRT_DAYS_REMAINS} days${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${EXT_CRT}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_AUTH_BASE}.${SSL_KEYSTORE_PFX}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEYSTORE_PFX}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEYSTORE_PFX}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_AUTH_BASE}.${SSL_KEYSTORE_B64}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEYSTORE_B64}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEYSTORE_B64}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_AUTH_BASE}.${SSL_KEYCERT_MAIN01_ENC}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEYCERT_MAIN01_ENC}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEYCERT_MAIN01_ENC}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_AUTH_BASE}.${SSL_KEYCERT_MAIN01_UNC}* ) 1> /dev/null 2>&1; then
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEYCERT_MAIN01_UNC}${END}" "✔️${END}"
    else
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEYCERT_MAIN01_UNC}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_AUTH_BASE}.${SSL_KEY_MAIN02_ENC}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEY_MAIN02_ENC}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEY_MAIN02_ENC}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_AUTH_BASE}.${SSL_KEY_MAIN02_UNC}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEY_MAIN02_UNC}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEY_MAIN02_UNC}${END}" "❌${END}"
    fi

    if [ "${PARAM_MIXED}" == "false" ] && [ "${PARAM_ALGORITHM}" == "rsa" ]; then
        if ( set +f; ls ${PATH_AUTH_BASE}.${SSL_KEY_RSA_PRIV}* ) 1> /dev/null 2>&1; then
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEY_RSA_PRIV}${END}" "✔️${END}"
        else
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEY_RSA_PRIV}${END}" "❌${END}"
        fi
    fi

    if [ "${PARAM_MIXED}" == "false" ] && [ "${PARAM_ALGORITHM}" == "rsa" ]; then
        if ( set +f; ls ${PATH_AUTH_BASE}.${SSL_KEY_RSA_PUB}* ) 1> /dev/null 2>&1; then
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEY_RSA_PUB}${END}" "✔️${END}"
        else
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEY_RSA_PUB}${END}" "❌${END}"
        fi
    fi

    if ( set +f; ls ${PATH_AUTH_BASE}.${SSL_KEY_SSH_PUB}* ) 1> /dev/null 2>&1; then
        thumbprint=$(ssh-keygen -lf "${PATH_AUTH_BASE}.${SSL_KEY_SSH_PUB}")
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEY_SSH_PUB}${END}" "✔️${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ ${thumbprint}${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEY_SSH_PUB}${END}" "❌${END}"
    fi

    if [ -n "$PWD_RAW" ] && (( ${#PWD_RAW} > 4 )) ; then
        if ( set +f; ls ${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV}* ) 1> /dev/null 2>&1; then
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV}${END}" "✔️${END}"
        else
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV}${END}" "❌${END}"
        fi
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}${END}" "⚠️ ‎ Skipped${END}"
    fi

    if ( set +f; ls ${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}* ) 1> /dev/null 2>&1; then
        thumbprint=$(ssh-keygen -lf "${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}")
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}${END}" "✔️${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ ${thumbprint}${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_AUTH}/${FILE_AUTH_BASE}.${SSL_CERT_FULLCHAIN}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH}/${FILE_AUTH_BASE}.${SSL_CERT_FULLCHAIN}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_AUTH}/${FILE_AUTH_BASE}.${SSL_CERT_FULLCHAIN}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_ROOTCA_SUB_CRL}/${FILE_AUTH_BASE}.${SSL_EXT_CRL_PEM}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_SUB_CRL}/${FILE_AUTH_BASE}.${SSL_EXT_CRL_PEM}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_SUB_CRL}/${FILE_AUTH_BASE}.${SSL_EXT_CRL_PEM}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_ROOTCA_SUB_CRL}/${FILE_AUTH_BASE}.${EXT_CRL}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_SUB_CRL}/${FILE_AUTH_BASE}.${EXT_CRL}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_SUB_CRL}/${FILE_AUTH_BASE}.${EXT_CRL}${END}" "❌${END}"
    fi

    echo -e
    echo -e "  ${BLUE} 📜 ${FILE_BITLOCKER_BASE} ${END}"
    echo -e " ${GREY1}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"

    # get certificate arguments since we need them later
    if ( set +f; ls ${PATH_BITLOCKER_BASE}.*${EXT_CRT}* ) 1> /dev/null 2>&1; then
        CRT_ALG=$(openssl x509 -in "${PATH_BITLOCKER_BASE}.${EXT_CRT}" -noout -text | awk -F':' '/Public Key Algorithm/ {print $2}' | tr -d ' ' | sed 's/^[ \t]*//')
        CRT_BITS=$(openssl x509 -in "${PATH_BITLOCKER_BASE}.${EXT_CRT}" -noout -text | awk -F':' '/Public-Key/ {print $2}' | tr -d '()' | sed 's/^[ \t]*//')
        CRT_FINGERPRINT=$(openssl x509 -in "${PATH_BITLOCKER_BASE}.${EXT_CRT}" -noout -fingerprint | cut -d= -f2 | sed 's/://g' )
        CRT_SERIAL=$(openssl x509 -in "${PATH_BITLOCKER_BASE}.${EXT_CRT}" -noout -serial | cut -d= -f2 | sed 's/://g' )
        CRT_CN=$(openssl x509 -in "${PATH_BITLOCKER_BASE}.${EXT_CRT}" -subject -noout | grep -o 'CN = [^,]*' | cut -d '=' -f 2 | sed 's/^[ \t]*//')
        CRT_O=$(openssl x509 -in "${PATH_BITLOCKER_BASE}.${EXT_CRT}" -subject -noout | grep -o 'O = [^,]*' | cut -d '=' -f 2 | sed 's/^[ \t]*//')
        CRT_OU=$(openssl x509 -in "${PATH_BITLOCKER_BASE}.${EXT_CRT}" -subject -noout | grep -o 'OU = [^,]*' | cut -d '=' -f 2 | sed 's/^[ \t]*//')

        CRT_DAYS=$(date -d "$(openssl x509 -in ${PATH_BITLOCKER_BASE}.${EXT_CRT} -enddate -noout | cut -d'=' -f2)" "+%s")
        DAYS_CURRENT=$(date "+%s")
        CRT_DAYS_REMAINS=$((($CRT_DAYS - $DAYS_CURRENT) / 60 / 60 / 24))
    fi

    if ( set +f; ls ${PATH_BITLOCKER_BASE}.*${SSL_KEY_MAIN01_ENC}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_ENC}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_ENC}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_BITLOCKER_BASE}.*${SSL_KEY_MAIN01_UNC}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_UNC}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_UNC}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_BITLOCKER_BASE}.*${EXT_CSR}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${EXT_CSR}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${EXT_CSR}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_BITLOCKER_BASE}.*${EXT_CRT}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${EXT_CRT}${END}" "✔️${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ common name .......... ${CRT_CN}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ organization ......... ${CRT_O}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳                        ${CRT_OU}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ fingerprint .......... ${CRT_FINGERPRINT}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ serial ............... ${CRT_SERIAL}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ algorithm ............ ${ALGOS[$CRT_ALG]}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ bits ................. ${CRT_BITS}${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ remaining ............ ${CRT_DAYS_REMAINS} days${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${EXT_CRT}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_PFX}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_PFX}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_PFX}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_B64}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_B64}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_B64}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_BITLOCKER_BASE}.${SSL_KEYCERT_MAIN01_ENC}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${SSL_KEYCERT_MAIN01_ENC}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${SSL_KEYCERT_MAIN01_ENC}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_BITLOCKER_BASE}.${SSL_KEYCERT_MAIN01_UNC}* ) 1> /dev/null 2>&1; then
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${SSL_KEYCERT_MAIN01_UNC}${END}" "✔️${END}"
    else
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${SSL_KEYCERT_MAIN01_UNC}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN02_ENC}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN02_ENC}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN02_ENC}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN02_UNC}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN02_UNC}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN02_UNC}${END}" "❌${END}"
    fi

    if [ "${PARAM_MIXED}" == "false" ] && [ "${PARAM_ALGORITHM}" == "rsa" ]; then
        if ( set +f; ls ${PATH_BITLOCKER_BASE}.${SSL_KEY_RSA_PRIV}* ) 1> /dev/null 2>&1; then
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${SSL_KEY_RSA_PRIV}${END}" "✔️${END}"
        else
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${SSL_KEY_RSA_PRIV}${END}" "❌${END}"
        fi
    fi

    if [ "${PARAM_MIXED}" == "false" ] && [ "${PARAM_ALGORITHM}" == "rsa" ]; then
        if ( set +f; ls ${PATH_BITLOCKER_BASE}.${SSL_KEY_RSA_PUB}* ) 1> /dev/null 2>&1; then
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${SSL_KEY_RSA_PUB}${END}" "✔️${END}"
        else
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${SSL_KEY_RSA_PUB}${END}" "❌${END}"
        fi
    fi

    if ( set +f; ls ${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PUB}* ) 1> /dev/null 2>&1; then
        thumbprint=$(ssh-keygen -lf "${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PUB}")
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PUB}${END}" "✔️${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ ${thumbprint}${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PUB}${END}" "❌${END}"
    fi

    if [ -n "$PWD_RAW" ] && (( ${#PWD_RAW} > 4 )) ; then
        if ( set +f; ls ${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV}* ) 1> /dev/null 2>&1; then
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV}${END}" "✔️${END}"
        else
            printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV}${END}" "❌${END}"
        fi
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}${END}" "⚠️ ‎ Skipped${END}"
    fi

    if ( set +f; ls ${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}* ) 1> /dev/null 2>&1; then
        thumbprint=$(ssh-keygen -lf "${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}")
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}${END}" "✔️${END}"
        printf '%-120s %-40s\n' "  ${BLUE}       ↳ ${thumbprint}${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_BITLOCKER}/${FILE_BITLOCKER_BASE}.${SSL_CERT_FULLCHAIN}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER}/${FILE_BITLOCKER_BASE}.${SSL_CERT_FULLCHAIN}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_BITLOCKER}/${FILE_BITLOCKER_BASE}.${SSL_CERT_FULLCHAIN}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_ROOTCA_SUB_CRL}/${FILE_BITLOCKER_BASE}.${SSL_EXT_CRL_PEM}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_SUB_CRL}/${FILE_BITLOCKER_BASE}.${SSL_EXT_CRL_PEM}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_SUB_CRL}/${FILE_BITLOCKER_BASE}.${SSL_EXT_CRL_PEM}${END}" "❌${END}"
    fi

    if ( set +f; ls ${PATH_ROOTCA_SUB_CRL}/${FILE_BITLOCKER_BASE}.${EXT_CRL}* ) 1> /dev/null 2>&1; then
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_SUB_CRL}/${FILE_BITLOCKER_BASE}.${EXT_CRL}${END}" "✔️${END}"
    else
        printf '%-120s %-40s\n' "  ${GREEN}  ↳ 🔑 ${PATH_ROOTCA_SUB_CRL}/${FILE_BITLOCKER_BASE}.${EXT_CRL}${END}" "❌${END}"
    fi

    echo -e
    echo -e " ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
    echo -e

    exit 1
}

# #
#   Display Usage Help
#
#   activate using generate --help or -z
# #

opt_usage()
{
    echo -e 
    printf "  ${c[blue]}${app_title}${c[end]}\n" 1>&2
    printf "  ${c[grey2]}${app_about}${c[end]}\n" 1>&2
    printf "  ${c[fuchsia2]}$app_file_this${c[end]} [ ${c[grey2]}--import ${c[yellow]}\"/path/to/rootCA.${SSL_KEY_MAIN01_ENC}\"${c[end]} | ${c[grey2]}--new${c[end]} [{ ${c[grey2]}--algorithm${c[end]} [ ${c[yellow]}\"rsa\"${c[grey2]} --bits ${c[yellow]}\"4096\"${c[end]} | ${c[yellow]}\"ecc\"${c[grey2]} --curve ${c[yellow]}\"secp521r1\"${c[end]} ] | ${c[grey2]}--mixed${c[end]} }] [ ${c[grey2]}--pass ${c[yellow]}\"PASS\"${c[end]} ] [ ${c[grey2]}--passin ${c[yellow]}\"PASS\"${c[end]} ] [ ${c[grey2]}--passout ${c[yellow]}\"PASS\"${c[end]} ] [ ${c[grey2]}--comment ${c[yellow]}\"My Self-signed Certs\"${c[end]} ] [ ${c[grey2]}--name ${c[yellow]}\"domain.lan\"${c[end]} ] [ ${c[grey2]}--days ${c[yellow]}\"365\"${c[end]} ] ] | [ ${c[grey2]}--wipe${c[end]} ] | [ ${c[grey2]}--clean${c[end]} ] | [ ${c[grey2]}--status${c[end]} ] | [ ${c[grey2]}--help${c[end]} ] ${c[end]}" 1>&2
    echo -e 
    echo -e 
    printf '  %-5s %-40s\n' "${c[grey1]}Syntax:${c[end]}" "" 1>&2
    printf '  %-5s %-48s %-40s\n' "    " "${c[grey1]}Command${c[end]}           " "${c[fuchsia2]}$app_file_this${c[end]} [ ${c[grey2]}-option${c[end]} ${c[yellow]}arg${c[end]}${c[end]} ]" 1>&2
    printf '  %-5s %-48s %-40s\n' "    " "${c[grey1]}Options${c[end]}           " "${c[fuchsia2]}$app_file_this${c[end]} [ ${c[grey2]}-h ${c[end]}|${c[grey2]} --help${c[end]} ]" 1>&2
    printf '  %-5s %-48s %-40s\n' "    " "    ${c[grey2]}-A${c[end]}            " "required" 1>&2
    printf '  %-5s %-48s %-40s\n' "    " "    ${c[grey2]}-A...${c[end]}         " "required; multiple can be specified" 1>&2
    printf '  %-5s %-48s %-40s\n' "    " "    ${c[grey2]}[ -A ]${c[end]}        " "optional" 1>&2
    printf '  %-5s %-48s %-40s\n' "    " "    ${c[grey2]}[ -A... ]${c[end]}     " "optional; multiple can be specified" 1>&2
    printf '  %-5s %-48s %-40s\n' "    " "    ${c[grey2]}{ -A | -B }${c[end]}   " "one or the other; do not use both" 1>&2
    printf '  %-5s %-48s %-40s\n' "    " "${c[grey1]}Arguments${c[end]}         " "${c[fuchsia2]}$app_file_this${c[end]} [ ${c[grey2]}-a${c[yellow]} arg${c[grey2]}${c[end]} | ${c[grey2]}--algorithm ${c[yellow]}arg${c[end]} ]${c[yellow]} arg${c[end]}" 1>&2
    printf '  %-5s %-48s %-40s\n' "    " "${c[grey1]}Examples${c[end]}          " "${c[fuchsia2]}$app_file_this${c[end]} ${c[grey2]}--new ${c[grey2]}--mixed ${c[grey2]}--pass${c[yellow]} \"PASS\" ${c[grey2]}--passin${c[yellow]} \"PASS\" ${c[grey2]}--passout${c[yellow]} \"PASS\" ${c[grey2]}--name${c[yellow]} \"Domain.lan\"${c[grey2]}${c[end]}" 1>&2
    printf '  %-5s %-48s %-40s\n' "    " "${c[grey1]}${c[end]}                  " "${c[fuchsia2]}$app_file_this${c[end]} ${c[grey2]}--algorithm ${c[yellow]}\"ecc\" ${c[grey2]}--mixed ${c[grey2]}--pass${c[yellow]} \"PASS\" ${c[grey2]}--passin${c[yellow]} \"PASS\" ${c[grey2]}--passout${c[yellow]} \"PASS\" ${c[grey2]}--name${c[yellow]} \"Domain.lan\"${c[grey2]}${c[end]}" 1>&2
    printf '  %-5s %-48s %-40s\n' "    " "${c[grey1]}${c[end]}                  " "${c[fuchsia2]}$app_file_this${c[end]} ${c[grey2]}--algorithm ${c[yellow]}\"rsa\" ${c[grey2]}--bits${c[yellow]} \"4096\" ${c[grey2]}--days${c[yellow]} \"365\" ${c[grey2]}--pass${c[yellow]} \"PASS\" ${c[grey2]}--name${c[yellow]} \"Domain.local\"${c[grey2]}${c[end]}" 1>&2
    printf '  %-5s %-48s %-40s\n' "    " "${c[grey1]}${c[end]}                  " "${c[fuchsia2]}$app_file_this${c[end]} ${c[grey2]}--algorithm ${c[yellow]}\"ecc\" ${c[grey2]}--curve${c[yellow]} \"secp521r1\" ${c[grey2]}--pass${c[yellow]} \"PASS\" ${c[grey2]}--comment${c[yellow]} \"Renewal for existing keys\" ${c[grey2]}--name${c[yellow]} \"Domain.local\"${c[grey2]}${c[end]}" 1>&2
    printf '  %-5s %-48s %-40s\n' "    " "${c[grey1]}${c[end]}                  " "${c[fuchsia2]}$app_file_this${c[end]} ${c[grey2]}--import ${c[yellow]}\"/path/to/rootCA.${SSL_KEY_MAIN01_ENC}\" ${c[grey2]}--pass${c[yellow]} \"PASS\" ${c[grey2]}--passin${c[yellow]} \"PASS\" ${c[grey2]}--passout${c[yellow]} \"PASS\" ${c[grey2]}--name${c[yellow]} \"Domain.local\"${c[grey2]}${c[end]}" 1>&2
    printf '  %-5s %-48s %-40s\n' "    " "${c[grey1]}${c[end]}                  " "${c[fuchsia2]}$app_file_this${c[end]} ${c[grey2]}--import ${c[yellow]}\"/path/to/rootCA.${SSL_KEY_MAIN01_ENC}\" ${c[grey2]}--pass${c[yellow]} \"PASS\" ${c[grey2]}--dev ${c[grey2]}--name${c[yellow]} \"Domain.local\"${c[grey2]}${c[end]}" 1>&2
    printf '  %-5s %-48s %-40s\n' "    " "${c[grey1]}${c[end]}                  " "${c[fuchsia2]}$app_file_this${c[end]} ${c[grey2]}--clean${c[end]}" 1>&2
    printf '  %-5s %-48s %-40s\n' "    " "${c[grey1]}${c[end]}                  " "${c[fuchsia2]}$app_file_this${c[end]} ${c[grey2]}--wipe${c[end]}" 1>&2
    printf '  %-5s %-48s %-40s\n' "    " "${c[grey1]}${c[end]}                  " "${c[fuchsia2]}$app_file_this${c[end]} ${c[grey2]}--tree${c[end]}" 1>&2
    printf '  %-5s %-48s %-40s\n' "    " "${c[grey1]}${c[end]}                  " "${c[fuchsia2]}$app_file_this${c[end]} ${c[grey2]}--status${c[end]}" 1>&2

    echo -e
    echo -e

    # #
    #   show tree
    # #

    showTree

    # #
    #   calculate seconds; used for expiration calculation
    # #

    T=$((PARAM_DAYS * 86400))
    Y=$((T/60/60/24/365))
    D=$((T/60/60/24))
    H=$((T/60/60%24))
    M=$((T/60%60))
    S=$((T%60))

    # #
    #   Count files in dir
    # #

    I_FILES_TOTAL=$(find . -name "*" -type f | wc -l )
    I_FILES_TOTAL=$(printf '%02d\n' $I_FILES_TOTAL)

    I_FILES_CNF=$(find . -name "*.${EXT_CNF}" -type f | wc -l )
    I_FILES_CNF=$(printf '%02d\n' $I_FILES_CNF)

    I_FILES_DELETE=$(find . -name "*" ! -name "*.${EXT_CNF}" -type f | wc -l )
    I_FILES_DELETE=$(printf '%02d\n' $I_FILES_DELETE)

    I_DIRS=$(find . -name "*" -type d | wc -l )
    I_DIRS=$(printf '%02d\n' $I_DIRS)

    echo -e
    printf '  %-5s %-40s\n' "${c[grey1]}Options:${c[end]}" "" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-n${c[grey1]},${c[blue2]}  --new${c[yellow]}${c[end]}                          " "generate new keys" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "   ${c[grey1]}requires all utility folders to be clean. existing private keys will block" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "   ${c[grey1]}this command from generating new keys. delete files ending with ${c[peach]}.${EXT_PEM}${c[grey1]} or ${c[peach]}.${EXT_KEY}${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-f${c[grey1]},${c[blue2]}  --config ${c[yellow]}<file>${c[end]}                " "specify ${c[peach]}${FILE_ROOTCA_CNF}${c[end]} openssl config file to load. ${c[navy]}<default> ${c[peach]}${PARAM_CNF_ROOTCA}${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-F${c[grey1]},${c[blue2]}  --config-bitlocker ${c[yellow]}<file>${c[end]}      " "specify ${c[peach]}${FILE_BITLOCKER_CNF}${c[end]} openssl config file to load for bitlocker / encryption. ${c[navy]}<default> ${c[peach]}${PARAM_CNF_BITLOCKER}${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-i${c[grey1]},${c[blue2]}  --import ${c[yellow]}<file>${c[end]}                " "import existing rsa or ecc private key. private key must have intact header with one of the following:${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "   ${c[grey1]}private key must have intact header with one of the following:" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "      - ${c[green]}${HEADER_RSA_PRIV_ENC}${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "      - ${c[green]}${HEADER_RSA_PRIV_UNC}${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "      - ${c[green]}${HEADER_ECC_PRIV_UNC}${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-a${c[grey1]},${c[blue2]}  --algorithm ${c[yellow]}<option>${c[end]}           " "specify algorithm to use when generating keys and certs. ${c[navy]}<default> ${c[peach]}${PARAM_ALGORITHM}${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "   ${c[grey1]}cannot be used in combination with option ${c[peach]}--mixed${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "   ${c[grey1]}pick one of the following:${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "      - ${c[green]}rsa${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "      - ${c[green]}ecc${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-V${c[grey1]},${c[blue2]}  --curve ${c[yellow]}<option>${c[end]}               " "curve to use for ecc keys ${c[navy]}<default> ${c[peach]}${PARAM_CURVE}${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "   ${c[grey1]}pick one of the following:${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "      - ${c[green]}secp384r1${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "      - ${c[green]}secp521r1${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "      - ${c[green]}sect571k1${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "      - ${c[green]}c2pnb368w1${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "      - ${c[green]}c2tnb431r1${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "      - ${c[green]}prime256v1${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-b${c[grey1]},${c[blue2]}  --bits ${c[yellow]}<option>${c[end]}                " "bits to use for rsa keys ${c[navy]}<default> ${c[peach]}${PARAM_BITS}${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-dr${c[grey1]},${c[blue2]} --digest-root ${c[yellow]}<option>${c[end]}         " "message digest to use for rootCA ${c[navy]}<default> ${c[peach]}${PARAM_MD_ROOT}${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "   ${c[grey1]}pick one of the following:${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "      - ${c[green]}SHA224${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "      - ${c[green]}SHA256${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "      - ${c[green]}SHA384${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "      - ${c[green]}SHA512${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-ds${c[grey1]},${c[blue2]} --digest-sub ${c[yellow]}<option>${c[end]}          " "message digest to use for subkeys ${c[navy]}<default> ${c[peach]}${PARAM_MD_SUB}${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "   ${c[grey1]}pick one of the following:${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "      - ${c[green]}SHA224${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "      - ${c[green]}SHA256${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "      - ${c[green]}SHA384${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "      - ${c[green]}SHA512${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-M${c[grey1]},${c[blue2]}  --mixed${c[yellow]}${c[end]}                        " "force ${c[yellow2]}${FILE_ROOTCA_CNF}${c[end]} to use ${c[yellow2]}RSA ${PARAM_BITS}${c[end]}; ${c[yellow2]}subkeys${c[end]} use ${c[yellow2]}ECC ${PARAM_CURVE}${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "   ${c[grey1]}cannot be used in combination with option ${c[peach]}--algorithm${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "   ${c[grey1]}change RSA bits with ${c[peach]}--bits ${c[yellow]}<number>${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "   ${c[grey1]}change ECC curve with ${c[peach]}--curve ${c[yellow]}<string>${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-N${c[grey1]},${c[blue2]}  --friendlyname ${c[yellow]}<string>${c[end]}        " "friendly name for certificate ${c[navy]}<default> ${c[peach]}${PARAM_FRIENDLY}${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-P${c[grey1]},${c[blue2]}  --pass ${c[yellow]}<pass>${c[end]}                  " "password to use for new keys${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-I${c[grey1]},${c[blue2]}  --passin ${c[yellow]}<pass>${c[end]}                " "password to decrypt input files${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-O${c[grey1]},${c[blue2]}  --passout ${c[yellow]}<pass>${c[end]}               " "password to encrypt output files${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-H${c[grey1]},${c[blue2]}  --homeFolder ${c[yellow]}<path>${c[end]}            " "absolute path to home folder ${c[navy]}<default> ${c[peach]}${app_dir_this_called}${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-C${c[grey1]},${c[blue2]}  --certsFolder ${c[yellow]}<path>${c[end]}           " "path to ${c[peach]}certs${c[end]} folder ${c[navy]}<default> ${c[peach]}${FOLDER_CERTS}${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "   ${c[grey1]}folder path relative to ${c[peach]}--homeFolder${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-R${c[grey1]},${c[blue2]}  --rootcaFolder ${c[yellow]}<path>${c[end]}          " "path to ${c[peach]}rootCA${c[end]} folder ${c[navy]}<default> ${c[peach]}${FOLDER_ROOTCA}${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "   ${c[grey1]}folder path relative to ${c[peach]}--homeFolder${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-D${c[grey1]},${c[blue2]}  --domainFolder ${c[yellow]}<path>${c[end]}          " "path to ${c[peach]}domain${c[end]} folder ${c[navy]}<default> ${c[peach]}${FOLDER_DOMAIN}${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "   ${c[grey1]}folder path relative to ${c[peach]}--homeFolder${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-d${c[grey1]},${c[blue2]}  --days ${c[yellow]}<number>${c[end]}                " "certificate expiration time in days ${c[navy]}<default> ${c[peach]}${PARAM_DAYS} days / ${Y} years${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-t${c[grey1]},${c[blue2]}  --comment ${c[yellow]}<string>${c[end]}             " "comment appended to end of OpenSSH keys ${c[navy]}<default> ${c[peach]}${PARAM_COMMENT}${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-c${c[grey1]},${c[blue2]}  --clean ${c[yellow]}${c[end]}                       " "remove all files, except ${c[peach]}OpenSSL .${EXT_CNF}${c[end]} and ${c[peach]}.${EXT_PEM} private keys${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-w${c[grey1]},${c[blue2]}  --wipe ${c[yellow]}${c[end]}                        " "remove all files, except ${c[peach]}OpenSSL .${EXT_CNF}${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "   ${c[grey1]}current storage:${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "      - ${c[blue]}${I_DIRS}${c[end]} folders" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "      - ${c[blue]}${I_FILES_TOTAL}${c[end]} files (total)" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "      - ${c[blue]}${I_FILES_CNF}${c[end]} files (.${EXT_CNF} configs)" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}  ${c[grey1]} ${c[blue2]}      ${c[yellow]}${c[end]}                           " "      - ${c[blue]}${I_FILES_DELETE}${c[end]} files (deletable)" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-v${c[grey1]},${c[blue2]}  --vars ${c[yellow]}${c[end]}                        " "list of app variables and paths${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-T${c[grey1]},${c[blue2]}  --tree ${c[yellow]}${c[end]}                        " "show example of files you will generate when using this app${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-s${c[grey1]},${c[blue2]}  --status ${c[yellow]}${c[end]}                      " "output list of certificates & keys currently valid or missing from app${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-v${c[grey1]},${c[blue2]}  --version ${c[yellow]}${c[end]}                     " "current version of this app${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-x${c[grey1]},${c[blue2]}  --dev ${c[yellow]}${c[end]}                         " "developer mode; verbose logging${c[end]}" 1>&2
    printf '  %-5s %-81s %-40s\n' "    " "${c[blue2]}-h${c[grey1]},${c[blue2]}  --help ${c[yellow]}${c[end]}                        " "show this help menu${c[end]}" 1>&2
    echo -e
    echo -e

    exit 1
}

# #
#   command-line options
#   
#   reminder that any functions which need executed must be defined BEFORE
#   this point. Bash sucks like that.
# #

while [ $# -gt 0 ]; do
    case "$1" in
        -f|--config)
            if [[ "$1" != *=* ]]; then shift; fi
            PARAM_CNF_ROOTCA="${1#*=}"
            if [ -z "${PARAM_CNF_ROOTCA}" ]; then
                echo -e "  ${END}Must specify a valid OpenSSL .cnf config"
                echo -e "  ${END}      Default:  ${YELLOW}${PARAM_CNF_ROOTCA}${END}"
                echo -e

                exit 1
            fi
            ;;

        -F|--config-bitlocker)
            if [[ "$1" != *=* ]]; then shift; fi
            PARAM_CNF_BITLOCKER="${1#*=}"
            if [ -z "${PARAM_CNF_BITLOCKER}" ]; then
                echo -e "  ${END}Must specify a valid OpenSSL .cnf config"
                echo -e "  ${END}      Default:  ${YELLOW}${PARAM_CNF_ROOTCA}${END}"
                echo -e

                exit 1
            fi
            ;;

        -P|--passwd|--pass|--password)
            if [[ "$1" != *=* ]]; then shift; fi
            PWD_RAW="${1#*=}"
            PWD_STR=${PWD_RAW//?/*}
            ;;

        -H|--homeFolder)
            if [[ "$1" != *=* ]]; then shift; fi
            app_dir_this_called="${1#*=}"
            if [ -z "${FOLDER_CERTS}" ]; then
                app_dir_this_called="$PWD"
            fi
            ;;

        -C|--certsFolder)
            if [[ "$1" != *=* ]]; then shift; fi
            FOLDER_CERTS="${1#*=}"
            if [ -z "${FOLDER_CERTS}" ]; then
                echo -e "  ${END}Must specify a valid certificates folder name"
                echo -e "  ${END}      Default:  ${YELLOW}${FOLDER_CERTS}${END}"
                echo -e

                exit 1
            fi
            ;;

        -R|--rootcaFolder)
            if [[ "$1" != *=* ]]; then shift; fi
            FOLDER_ROOTCA="${1#*=}"
            if [ -z "${FOLDER_ROOTCA}" ]; then
                echo -e "  ${END}Must specify a valid rootCA folder name"
                echo -e "  ${END}      Default:  ${YELLOW}${FOLDER_ROOTCA}${END}"
                echo -e

                exit 1
            fi
            ;;

        -D|-do|--domainFolder)
            if [[ "$1" != *=* ]]; then shift; fi
            FOLDER_DOMAIN="${1#*=}"
            if [ -z "${FOLDER_DOMAIN}" ]; then
                echo -e "  ${END}Must specify a valid domain folder name"
                echo -e "  ${END}      Default:  ${YELLOW}${FOLDER_DOMAIN}${END}"
                echo -e

                exit 1
            fi
            ;;

        -N|--friendlyname|--name)
            if [[ "$1" != *=* ]]; then shift; fi
            PARAM_FRIENDLY="${1#*=}"
            if [ -z "${PARAM_FRIENDLY}" ]; then
                echo -e "  ${END}Must specify a valid friendly name for the certificate${END}"
                echo -e "      ${BOLD}${GREY2}${app_file_this} --friendlyname "Certificate Name"${END}"
                echo -e "      ${BOLD}${GREY2}${app_file_this} -n "Certificate Name"${END}"
                echo -e

                exit 1
            fi
            ;;

        -n|--new|--newkey|--newkeys)
            PARAM_NEW_KEYS="true"
            echo -e "  ${FUCHSIA1}${BLINK}Generating New Keys${END}"
            echo -e
            ;;

        -i|--import)
            if [[ "$1" != *=* ]]; then shift; fi
            _PASS_IMPORT="true"
            PARAM_IMPORT_PATH="${1#*=}"
            ;;

        -a|--algo|--algorithm)
            if [[ "$1" != *=* ]]; then shift; fi
            PARAM_ALGORITHM="${1#*=}"
            PARAM_ALGORITHM_SET="true"
            if [ -z "${PARAM_ALGORITHM}" ]; then
                echo -e "  ${END}Must specify a key algorithm: ${GREY2}ecc, rsa${END}"
                echo -e "      ${BOLD}${GREY2}${app_file_this} --algorithm rsa${END}"
                echo -e "      ${BOLD}${GREY2}${app_file_this} -a ecc${END}"
                echo -e

                exit 1
            fi
            ;;

        -dr|--digest-root)
            if [[ "$1" != *=* ]]; then shift; fi
            PARAM_MD_ROOT="${1#*=}"
            ;;

        -ds|--digest-sub)
            if [[ "$1" != *=* ]]; then shift; fi
            PARAM_MD_SUB="${1#*=}"
            ;;

        -M|--mixed)
            PARAM_MIXED="true"
            ;;

        -V|--curve)
            if [[ "$1" != *=* ]]; then shift; fi
            PARAM_CURVE="${1#*=}"
            if [ -z "${PARAM_CURVE}" ]; then
                echo -e "  ${END}Must specify a curve when selecting ECDSA / ECC algorithm"
                echo -e "      ${BOLD}${GREY2}${app_file_this} --curve ${PARAM_CURVE}${END}"
                echo -e "      ${BOLD}${GREY2}${app_file_this} -V secp521r1${END}"
                echo -e

                exit 1
            fi
            ;;

        -b|--bit|--bits)
            if [[ "$1" != *=* ]]; then shift; fi
            PARAM_BITS="${1#*=}"
            ;;

        -I|--passin)
            if [[ "$1" != *=* ]]; then shift; fi
            PWD_IN="${1#*=}"
            if [ -z "${PWD_IN}" ]; then
                echo -e "  ${END}Must specify passin"
                echo -e "      ${BOLD}${GREY2}${app_file_this} --passin password${END}"
                echo -e "      ${BOLD}${GREY2}${app_file_this} -I password${END}"
                echo -e

                exit 1
            fi
            PWD_STR=${PWD_IN//?/*}
            ;;

        -O|--passout)
            if [[ "$1" != *=* ]]; then shift; fi
            PWD_OUT="${1#*=}"
            if [ -z "${PWD_OUT}" ]; then
                echo -e "  ${END}Must specify passout"
                echo -e "      ${BOLD}${GREY2}${app_file_this} --passout password${END}"
                echo -e "      ${BOLD}${GREY2}${app_file_this} -O password${END}"
                echo -e

                exit 1
            fi
            PWD_STR=${PWD_OUT//?/*}
            ;;

        -x|--dev)
            PARAM_DEV_ENABLED="true"
            echo -e "  ${FUCHSIA1}${BLINK}Developer Mode Enabled${END}"
            echo -e
            ;;

        -d|--expires|--days)
            if [[ "$1" != *=* ]]; then shift; fi
            PARAM_DAYS="${1#*=}"
            if [ -z "${PARAM_DAYS}" ]; then
                echo -e "  ${END}Must specify valid expiration days ${GREY2}36500${END}"
                echo -e "      ${BOLD}${GREY2}${app_file_this} --days 360${END}"
                echo -e "      ${BOLD}${GREY2}${app_file_this} --d 700${END}"
                echo -e

                exit 1
            fi
            ;;

        -t|--comment)
            if [[ "$1" != *=* ]]; then shift; fi
            PARAM_COMMENT="${1#*=}"
            ;;

        -c|--clean)

            # #
            #   clean removes all files except for private keys used to generate original files
            #
            #   @usage          generate --clean
            # #

            find ${PATH_CERTS} \
            ! -name "${PARAM_CNF_ROOTCA}" \
            ! -name "${PARAM_CNF_BITLOCKER}" \
            ! -name "*.${EXT_CNF}" \
            ! -name "${FILE_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}" \
            ! -name "${FILE_ROOTCA_BASE}.${SSL_KEY_MAIN01_UNC}" \
            ! -name "${FILE_ROOTCA_BASE}.${SSL_KEY_MAIN01_RSA_PUB}" \
            ! -name "${FILE_ROOTCA_BASE}.${SSL_KEY_MAIN01_RSA_UNC_PRIV}" \
            ! -name "${FILE_ROOTCA_BASE}.${SSL_KEY_MAIN01_RSA_ENC_PRIV}" \
            ! -name "${FILE_DOMAIN_BASE}.${SSL_KEY_MAIN01_ENC}" \
            ! -name "${FILE_DOMAIN_BASE}.${SSL_KEY_MAIN01_UNC}" \
            ! -name "${FILE_AUTH_BASE}.${SSL_KEY_MAIN01_ENC}" \
            ! -name "${FILE_AUTH_BASE}.${SSL_KEY_MAIN01_UNC}" \
            ! -name "${FILE_BITLOCKER_BASE}.${SSL_KEY_MAIN01_ENC}" \
            ! -name "${FILE_BITLOCKER_BASE}.${SSL_KEY_MAIN01_UNC}" \
            -type f -exec rm -f {} +

            exit 1
            ;;

        -w|--wipe)

            # #
            #   wipes all files from the generator, leaving you only the folders and the rootCA.cnf
            #
            #   @usage          generate --wipe
            # #

            find ${PATH_CERTS} \
            ! -name "${PARAM_CNF_ROOTCA}" \
            ! -name "${PARAM_CNF_BITLOCKER}" \
            ! -name "*.${EXT_CNF}" \
            -type f -exec rm -f {} +

            exit 1
            ;;

        -v|--vars)

            # #
            #   wipes all files from the generator, leaving you only the folders and the rootCA.cnf
            #
            #   @usage          generate --vars
            # #

            echo -e

            echo -e " ${BLUE} 🔖 Vars ${END}"
            echo -e " ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"

            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 🔖 \$SYS_OS${END}" "${SYS_OS}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 🔖 \$SYS_OS_VER${END}" "${SYS_OS_VER}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 🔖 \$sys_arch${END}" "${sys_arch}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 🔖 \$sys_code${END}" "${sys_code}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 🔖 \$APP_VERSION${END}" "v$(get_version)${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 🔖 \$app_dir_this_called${END}" "${app_dir_this_called}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 🔖 \$app_file_this${END}" "${app_file_this}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 🔖 \$PWD${END}" "${PWD}${END}"

            echo -e
            echo -e

            echo -e " ${BLUE} 📁 Folders ${END}"
            echo -e " ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 📁 \$FOLDER_ROOTCA${END}" "${FOLDER_ROOTCA}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 📁 \$FOLDER_ROOT_SUB_GEN${END}" "${FOLDER_ROOT_SUB_GEN}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 📁 \$FOLDER_ROOT_SUB_CRL${END}" "${FOLDER_ROOT_SUB_CRL}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 📁 \$FOLDER_ROOT_SUB_CERTS${END}" "${FOLDER_ROOT_SUB_CERTS}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 📁 \$FOLDER_DOMAIN${END}" "${FOLDER_DOMAIN}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 📁 \$FOLDER_AUTH${END}" "${FOLDER_AUTH}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 📁 \$FOLDER_BITLOCKER${END}" "${FOLDER_BITLOCKER}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 📁 \$FOLDER_CERTS${END}" "${FOLDER_CERTS}${END}"

            echo -e
            echo -e

            echo -e " ${BLUE} 📄 Files ${END}"
            echo -e " ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 📄 \$FILE_ROOTCA_BASE${END}" "${FILE_ROOTCA_BASE}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 📄 \$FILE_DOMAIN_BASE${END}" "${FILE_DOMAIN_BASE}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 📄 \$FILE_AUTH_BASE${END}" "${FILE_AUTH_BASE}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 📄 \$FILE_BITLOCKER_BASE${END}" "${FILE_BITLOCKER_BASE}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 📄 \$FILE_ROOTCA_DB${END}" "${FILE_ROOTCA_DB}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 📄 \$FILE_ROOTCA_CRLNUMBER${END}" "${FILE_ROOTCA_CRLNUMBER}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 📄 \$FILE_ROOTCA_SERIAL${END}" "${FILE_ROOTCA_SERIAL}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 📄 \$FILE_ROOTCA_CNF${END}" "${FILE_ROOTCA_CNF}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 📄 \$FILE_BITLOCKER_CNF${END}" "${FILE_BITLOCKER_CNF}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 🔑 \$SSL_KEY_MAIN01_ENC${END}" "${SSL_KEY_MAIN01_ENC}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 🔑 \$SSL_KEY_MAIN01_UNC${END}" "${SSL_KEY_MAIN01_UNC}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 🔑 \$SSL_KEY_MAIN02_ENC${END}" "${SSL_KEY_MAIN02_ENC}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 🔑 \$SSL_KEY_MAIN02_UNC${END}" "${SSL_KEY_MAIN02_UNC}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 🔑 \$SSL_KEY_RSA_PRIV${END}" "${SSL_KEY_RSA_PRIV}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 🔑 \$SSL_KEY_RSA_PUB${END}" "${SSL_KEY_RSA_PUB}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 🔑 \$SSL_KEY_SSH_PUB${END}" "${SSL_KEY_SSH_PUB}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 🔑 \$SSL_KEY_SSH_PRIV${END}" "${SSL_KEY_SSH_PRIV}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 🔑 \$SSL_KEY_SSH_PRIV_NOPWD${END}" "${SSL_KEY_SSH_PRIV_NOPWD}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 🔑 \$SSL_KEYCERT_MAIN01_ENC${END}" "${SSL_KEYCERT_MAIN01_ENC}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 🔑 \$SSL_KEYCERT_MAIN01_UNC${END}" "${SSL_KEYCERT_MAIN01_UNC}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 🔑 \$SSL_KEYSTORE_PFX${END}" "${SSL_KEYSTORE_PFX}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 🔑 \$SSL_KEYSTORE_B64${END}" "${SSL_KEYSTORE_B64}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 🔑 \$EXT_CRT${END}" "${EXT_CRT}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 🔑 \$EXT_CSR${END}" "${EXT_CSR}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 🔑 \$EXT_CRL${END}" "${EXT_CRL}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 🔑 \$SSL_EXT_CRL_PEM${END}" "${SSL_EXT_CRL_PEM}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ 🔑 \$SSL_CERT_FULLCHAIN${END}" "${SSL_CERT_FULLCHAIN}${END}"

            echo -e
            echo -e

            echo -e " ${BLUE} ➡️  Paths ${END}"
            echo -e " ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ ⚙️  \$PATH_CERTS${END}" "${PATH_CERTS}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ ⚙️  \$PATH_ROOTCA${END}" "${PATH_ROOTCA}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ ⚙️  \$PATH_ROOTCA_SUB_CRL${END}" "${PATH_ROOTCA_SUB_CRL}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ ⚙️  \$PATH_ROOTCA_SUB_GEN${END}" "${PATH_ROOTCA_SUB_GEN}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ ⚙️  \$PATH_ROOTCA_SUB_CERTS${END}" "${PATH_ROOTCA_SUB_CERTS}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ ⚙️  \$PATH_ROOTCA_BASE${END}" "${PATH_ROOTCA_BASE}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ ⚙️  \$PATH_DOMAIN${END}" "${PATH_DOMAIN}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ ⚙️  \$PATH_DOMAIN_BASE${END}" "${PATH_DOMAIN_BASE}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ ⚙️  \$PATH_AUTH${END}" "${PATH_AUTH}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ ⚙️  \$PATH_AUTH_BASE${END}" "${PATH_AUTH_BASE}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ ⚙️  \$PATH_BITLOCKER${END}" "${PATH_BITLOCKER}${END}"
            printf '%-60s %-40s\n' "  ${GREEN}  ↳ ⚙️  \$PATH_BITLOCKER_BASE${END}" "${PATH_BITLOCKER_BASE}${END}"

            echo -e
            echo -e

            exit 1
            ;;

        -h*|--help*)
            opt_usage
            exit 1
            ;;

        -s|--status)
            echo
            readStatus
            echo
            exit 1
            ;;

        -T|--tree)
            echo
            showTree
            echo
            exit 1
            ;;

        -v|--version)
            echo
            echo -e "  ${c[green2]}${c[bold]}${app_title}${c[end]} - v$(get_version)${c[end]}"
            echo -e "  ${c[grey2]}${c[bold]}${app_repo_url}${c[end]}"
            echo -e "  ${c[grey2]}${c[bold]}${sys_os} | ${sys_os_ver}${c[end]}"
            echo
            exit 1
            ;;
        *)
            opt_usage
            ;;
    esac
    shift
done

# #
#   Set CNF file only if --mixed not specified
# #

if [ "${PARAM_MIXED}" == "false" ]; then
    if [ "${PARAM_ALGORITHM}" == "ec" ] || [ "${PARAM_ALGORITHM}" == "ecc" ] || [ "${PARAM_ALGORITHM}" == "ecdsa" ]; then
        PARAM_CNF_ROOTCA="${FILE_ROOTCA_CNF}-ecc.${EXT_CNF}"
        PARAM_CNF_BITLOCKER="${FILE_BITLOCKER_CNF}-ecc.${EXT_CNF}"
    fi
else
    PARAM_CNF_ROOTCA="${FILE_ROOTCA_CNF}-rsa.${EXT_CNF}"
    PARAM_CNF_BITLOCKER="${FILE_BITLOCKER_CNF}-ecc.${EXT_CNF}"
    PARAM_MD_SUB=sha384
fi

# #
#   Check if MIXEd and ALGORITHM both specified
#   Since these two settings are incompatible, throw error and exit
# #

if [ "${PARAM_ALGORITHM_SET}" == "true" ] && [ "${PARAM_MIXED}" == "true" ]; then
    echo
    echo -e "  ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
    echo -e
    echo -e "  ${BOLD}${ORANGE}WARNING ‎ ‎‎ ‎ ‎ ‎ ‎ ‎${WHITE}Incompatible Settings${END}"
    echo -e "  ${WHITE}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎You specified two parameters which are incompatible with each other.${END}"
    echo -e "  ${WHITE}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎You cannot specify both ${BLUE2}-a, --algorithm${END} and ${BLUE2}-M, --mixed${END} in your command.${END}"
    echo -e "  ${WHITE}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎Must drop one or the other.${END}"
    echo -e
    echo -e "  ${WHITE}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎${BLUE2}-a, --algorithm${END} forces both your rootCA and sub keys to be generated using a specific algorithm${END}"
    echo -e "  ${WHITE}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎${BLUE2}-M, --mixed${END} forces your rootCA certificate to be generated using RSA 4096; and sub keys will use ECC${END}"
    echo -e
    echo -e "  ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
    echo

    exit 1
fi

# #
#   Check if OpenSSL installed
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Requirements${END}" "${GREY3}Status${END}" "${RED}›${END}" "${BLUE2}Checking if OpenSSL is installed${END}"

if ! command -v openssl 2>&1 >/dev/null; then

    echo
    echo -e "  ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
    echo -e
    echo -e "  ${BOLD}${ORANGE}WARNING ‎ ‎‎ ‎ ‎ ‎ ‎ ‎${WHITE}OpenSSL Not Found${END}"
    echo -e "  ${WHITE}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎We could not locate the installed package ${BLUE}OpenSSL${WHITE} which is required${END}"
    echo -e "  ${WHITE}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎for this script to work. Install it using the command below:${END}"
    echo -e "  ${BOLD}${GREY2}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎sudo apt update && sudo apt install openssl${END}"
    echo -e
    echo -e "  ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
    echo

    exit 1
else
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Requirements${END}" "${GREY3}Status${END}" "${RED}›${END}" "${BLUE2}OpenSSL found; continuing utility${END}"
fi

# #
#   Check if PASSWORD, PASSWORD IN, and PASSWORD OUT are empty.
# #

if [ -n "$PWD_RAW" ]; then
    if [ -z "${PWD_IN}" ] || [ "${PWD_IN}" == "false" ]; then
            PWD_IN=$PWD_RAW
    fi

    if [ -z "${PWD_OUT}" ] || [ "${PWD_OUT}" == "false" ]; then
            PWD_OUT=$PWD_RAW
    fi
fi

# #
#   --new and --import provided
# #

if [[ ${_PASS_IMPORT} == "true" ]] && [ "${PARAM_NEW_KEYS}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Import-001${END}" "${GREY3}Status${END}" "${RED}›${END}" "${RED2}Cannot specify both ${c[yellow2]}--new${c[RED2]} and ${c[yellow2]}--import${c[RED2]} in the same command ${RED2}aborting${END}"

    echo -e 
    echo -e "  ${c[red2]}ERROR           ${c[end]}Cannot specify both ${c[yellow2]}--new${c[end]} and ${c[yellow2]}--import${c[end]} in the same command"
    echo -e "                  Unable to do both; import an existing key, and generate new keys. You must pick one or the other.${c[end]}"
    echo -e
    echo -e "                  Try the following examples:${c[end]}"
    echo -e "                       ${c[grey1]}generate --import ${c[yellow]}\"/path/to/rootCA.${SSL_KEY_MAIN01_ENC}\"${c[grey1]} --pass ${c[yellow]}\"PASS\"${c[grey1]} --passin ${c[yellow]}\"PASS\"${c[grey1]} --passout ${c[yellow]}\"PASS\"${c[grey1]} --name ${c[yellow]}\"Domain.local\"${c[end]}"
    echo -e "                       ${c[grey1]}generate --new --mixed --pass ${c[yellow]}\"PASS\"${c[grey1]} --passin ${c[yellow]}\"PASS\"${c[grey1]} --passout ${c[yellow]}\"PASS\"${c[grey1]} --name ${c[yellow]}\"Domain.lan\"${c[end]}"
    echo -e

    exit 0
fi

# #
#   Importer
# #

if [[ ${_PASS_IMPORT} == "true" ]]; then

    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Import-001${END}" "${GREY3}Status${END}" "${RED}›${END}" "${BLUE2}Checking if imported file exists${END}"

    # #
    #   Import path empty / not found
    # #

    if [ ! -f "${PARAM_IMPORT_PATH}" ] || [ -z "${PARAM_IMPORT_PATH}" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Import-002${END}" "${GREY3}Status${END}" "${RED}›${END}" "${BLUE2}Import not found; ${ORANGE}aborting${END}"

        echo
        echo -e "  ${BOLD}${ORANGE}WARNING ‎ ‎‎ ‎ ‎ ‎ ‎ ‎${WHITE}Cannot Import Specified File${END}"
        echo -e "  ${WHITE}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎You must ensure the private key you wish to import actually exists. This utility only supports${END}"
        echo -e "  ${WHITE}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎RSA and ECDSA ${GREEN}private keys${WHITE} with a properly formatted header.${END}"
        echo

        exit 0
    fi

    # #
    #   Convert full import path to filename only
    # #

    PARAM_IMPORT_FILE=$(basename "${PARAM_IMPORT_PATH}")

    # #
    #   Decide which private key is imported
    # #

    if grep -q "${HEADER_RSA_PRIV_ENC}" "$PARAM_IMPORT_PATH"; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Import-003${END}" "${GREY3}Status${END}" "${RED}›${END}" "${GREEN}Found ${YELLOW3}encrypted private key${END}"
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Import-004${END}" "${GREY3}Status${END}" "${RED}›${END}" "${BLUE2}Copying ${YELLOW3}encrypted${BLUE2} private key to ${YELLOW3}${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}${END}"
        cp "${PARAM_IMPORT_PATH}" "${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}"
    elif grep -q "${HEADER_RSA_PRIV_UNC}" "$PARAM_IMPORT_PATH"; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Import-003${END}" "${GREY3}Status${END}" "${RED}›${END}" "${GREEN}Found ${YELLOW3}unencrypted private key${END}"
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Import-004${END}" "${GREY3}Status${END}" "${RED}›${END}" "${BLUE2}Copying ${YELLOW3}unencrypted ${BLUE2}private key to ${YELLOW3}${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_UNC}${END}"
        cp "${PARAM_IMPORT_PATH}" "${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_UNC}"
    elif grep -q "${HEADER_ECC_PRIV_UNC}" "$PARAM_IMPORT_PATH"; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Import-003${END}" "${GREY3}Status${END}" "${RED}›${END}" "${GREEN}Found ${YELLOW3}EC private key${END}"
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Import-004${END}" "${GREY3}Status${END}" "${RED}›${END}" "${BLUE2}Copying ${YELLOW3}EC ${BLUE2}private key to ${YELLOW3}${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_UNC}${END}"
        cp "${PARAM_IMPORT_PATH}" "${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}"
        cp "${PARAM_IMPORT_PATH}" "${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_UNC}"
    else
        echo
        echo -e "  ${BOLD}${ORANGE}WARNING ‎ ‎‎ ‎ ‎ ‎ ‎ ‎${WHITE}Unrecognized Private Key${END}"
        echo -e "  ${WHITE}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎This utility could not figure out what type of private key you are importing. This${END}"
        echo -e "  ${WHITE}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎utility only supports RSA and ECDSA ${GREEN}private keys${WHITE} with a properly formatted header.${END}"
        echo -e "  ${BOLD}${GREY2}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎${app_file_this} --import \"${PARAM_IMPORT_PATH}\" --pass \"YOUR_PASS\"${END}"
        echo
    fi

    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Import-005${END}" "${GREY3}Status${END}" "${RED}›${END}" "${BLUE2}Checking imported file for password${END}"

    # #
    #   Check if imported key has password, and if correct password is given
    # #

    if openssl rsa -noout -in "$PARAM_IMPORT_PATH" -passin "pass:$PWD_RAW" 2>/dev/null; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Import-006${END}" "${GREY3}Status${END}" "${RED}›${END}" "${BLUE2}Correct password supplied for imported key${END}"
    else
        echo
        echo -e "  ${BOLD}${ORANGE}WARNING ‎ ‎‎ ‎ ‎ ‎ ‎ ‎${WHITE}Password Restriction${END}"
        echo -e "  ${WHITE}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎The private key you are attempting to import appears to have a password.${END}"
        echo -e "  ${WHITE}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎To import a password protected private key, you must add the ${BLUE}--pass, -P${WHITE} option${END}"
        echo -e "  ${WHITE}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎when importing, and the password must be correct.${END}"
        echo -e "  ${BOLD}${GREY2}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎${app_file_this} --import \"${PARAM_IMPORT_PATH}\" --pass \"YOUR_PASS\"${END}"
        echo

        exit 0
    fi

    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Import-007${END}" "${GREY3}Status${END}" "${RED}›${END}" "${BLUE2}Import complete; running main generator${END}"
fi

# #
#   Core > Integrity Check
#
#   📁 Parent folder
#       📁 certificates
#           📁 rootCA
#               📁 certs
#               📁 crl
#               📁 generated
#               📄 rootCA.cnf
#           📁 domain
#       📄 generate.sh
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Core-001${END}" "${GREY3}${LNG_STEP_CHECK_INTEGRITY}${END}" "${RED}›${END}" "${BLUE2}Scanning ${GREY3}${PATH_ROOTCA}/${END}"

if [ ! -d "${PATH_ROOTCA}/${FOLDER_ROOT_SUB_GEN}" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Core-002${END}" "${GREY3}${LNG_STEP_CHECK_INTEGRITY}${END}" "${RED}›${END}" "${BLUE2}Created ${GREY3}${PATH_ROOTCA}/${FOLDER_ROOT_SUB_GEN}/${END}"
    mkdir -p ${PATH_ROOTCA}/${FOLDER_ROOT_SUB_GEN}
else
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Core-002${END}" "${GREY3}${LNG_STEP_CHECK_INTEGRITY}${END}" "${RED}›${END}" "${GREEN}Found ${GREY3}${PATH_ROOTCA}/${FOLDER_ROOT_SUB_GEN}/${END}"
fi

if [ ! -d "${PATH_ROOTCA_SUB_CERTS}" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Core-003${END}" "${GREY3}${LNG_STEP_FOLDER_CREATE}${END}" "${RED}›${END}" "${BLUE2}Created ${GREY3}${PATH_ROOTCA_SUB_CERTS}/${END}"
    mkdir -p ${PATH_ROOTCA_SUB_CERTS}
else
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Core-003${END}" "${GREY3}${LNG_STEP_CHECK_INTEGRITY}${END}" "${RED}›${END}" "${GREEN}Found ${GREY3}${PATH_ROOTCA_SUB_CERTS}/${END}"
fi

if [ ! -d "${PATH_ROOTCA_SUB_CRL}" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Core-004${END}" "${GREY3}${LNG_STEP_FOLDER_CREATE}${END}" "${RED}›${END}" "${YELLOW3}Created ${GREY3}${PATH_ROOTCA_SUB_CRL}/${END}"
    mkdir -p ${PATH_ROOTCA_SUB_CRL}
else
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Core-004${END}" "${GREY3}${LNG_STEP_CHECK_INTEGRITY}${END}" "${RED}›${END}" "${GREEN}Found ${GREY3}${PATH_ROOTCA_SUB_CRL}/${END}"
fi

if [ ! -d "${PATH_DOMAIN}" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Core-005${END}" "${GREY3}${LNG_STEP_FOLDER_CREATE}${END}" "${RED}›${END}" "${YELLOW3}Created ${GREY3}${PATH_DOMAIN}/${END}"
    mkdir -p ${PATH_DOMAIN}
else
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Core-005${END}" "${GREY3}${LNG_STEP_CHECK_INTEGRITY}${END}" "${RED}›${END}" "${GREEN}Found ${GREY3}${PATH_DOMAIN}/${END}"
fi

if [ ! -d "${PATH_AUTH}" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Core-006${END}" "${GREY3}${LNG_STEP_FOLDER_CREATE}${END}" "${RED}›${END}" "${YELLOW3}Created ${GREY3}${PATH_AUTH}/${END}"
    mkdir -p ${PATH_AUTH}
else
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Core-006${END}" "${GREY3}${LNG_STEP_CHECK_INTEGRITY}${END}" "${RED}›${END}" "${GREEN}Found ${GREY3}${PATH_AUTH}/${END}"
fi

# #
#   Core > Check > Private Key
#
#   if --new is not specified; the system thinks there are existing private keys.
#   throw an error to the user if existing private keys could not be found and tell them to re-run the
#   command again with `--new` appended.
# #

if [ -z "${PARAM_NEW_KEYS}" ] || [ "${PARAM_NEW_KEYS}" == "false" ]; then
    if ( set +f; ls ${PATH_ROOTCA_BASE}.*${SSL_KEY_MAIN01_ENC}* ) 1> /dev/null 2>&1; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Core-007${END}" "${GREY3}${LNG_STEP_CHECK_INTEGRITY}${END}" "${RED}›${END}" "${GREEN}Found ${GREY3}private key${END}"
    else
        echo -e
        echo -e " ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
        echo -e
        echo -e "  ${BOLD}${ORANGE}WARNING  ${WHITE}Could not locate an existing ${YELLOW}${FILE_ROOTCA_BASE}${WHITE} private key at:${END}"
        echo -e "      ${BOLD}${GREY2}${PATH_ROOTCA_BASE}.*${SSL_KEY_MAIN01_ENC}*${END}"
        echo -e
        echo -e "  ${BOLD}You must either supply an existing private key, or re-run this command with the option ${ORANGE}--new${END}"
        echo -e "      ${BOLD}${GREY2}${app_file_this} --new --name \"Certificate Name\"${END}"
        echo -e
        echo -e "  ${BOLD}You can also specify a password so that you don't have to keep entering it with ${ORANGE}--pass YOUR_PASS${END}"
        echo -e "      ${BOLD}${GREY2}${app_file_this} --new --name \"Certificate Name\" --pass \"YOUR_PASS\"${END}"
        echo -e
        echo -e " ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
        echo -e

        exit 1
    fi

    if ( set +f; ls ${PATH_DOMAIN_BASE}.*${SSL_KEY_MAIN01_ENC}* ) 1> /dev/null 2>&1; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Core-008${END}" "${GREY3}${LNG_STEP_CHECK_INTEGRITY}${END}" "${RED}›${END}" "${GREEN}Found ${GREY3}private key${END}"
    else
        echo -e
        echo -e " ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
        echo -e
        echo -e "  ${BOLD}${ORANGE}WARNING  ${WHITE}Could not locate an existing ${YELLOW}${FILE_DOMAIN_BASE}${WHITE} private key at:${END}"
        echo -e "      ${BOLD}${GREY2}${PATH_DOMAIN_BASE}.*${SSL_KEY_MAIN01_ENC}*${END}"
        echo -e
        echo -e "  ${BOLD}You must either supply an existing private key, or re-run this command with the option ${ORANGE}--new${END}"
        echo -e "      ${BOLD}${GREY2}${app_file_this} --new --name \"Certificate Name\"${END}"
        echo -e
        echo -e "  ${BOLD}You can also specify a password so that you don't have to keep entering it with ${ORANGE}--pass YOUR_PASS${END}"
        echo -e "      ${BOLD}${GREY2}${app_file_this} --new --name \"Certificate Name\" --pass \"YOUR_PASS\"${END}"
        echo -e
        echo -e " ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
        echo -e

        exit 1
    fi
fi

# #
#   Core > Check > OpenSSL Configs
# #

if [ ! -f "${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Core-009${END}" "${GREY3}${LNG_STEP_CHECK_INTEGRITY}${END}" "${RED}›${END}" "${RED}Missing ${GREY3}${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}${END}"

    echo -e
    echo -e " ${BLUE}---------------------------------------------------------------------------------------------------${END}"
    echo -e
    echo -e "  ${BOLD}${ORANGE}WARNING  ${WHITE}Could not locate ${FILE_ROOTCA_BASE}.${EXT_CNF} OpenSSL Config${END}"
    echo -e "  ${BOLD}This script cannot continue to run without the file being available in your folder structure."
    echo -e
    echo -e "      ${BOLD}${GREY2}Missing: ${ORANGE}${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}${END}"
    echo -e
    echo -e " ${BLUE}---------------------------------------------------------------------------------------------------${END}"
    echo -e

    exit 1

else
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Core-009${END}" "${GREY3}${LNG_STEP_CHECK_INTEGRITY}${END}" "${RED}›${END}" "${GREEN}Found ${GREY3}${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}${END}"
fi

# #
#   Core > Check cnf files for unset IP
# #

if grep -R "XX.XX.XX.XX" "${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}" >/dev/null 2>&1; then

    STR_FOUND=$(grep -R "XX.XX.XX.XX" "${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}")
    STR_LINE=$(grep -n "XX.XX.XX.XX" "${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}" | cut -d : -f 1)

    echo -e
    echo -e " ${BLUE}---------------------------------------------------------------------------------------------------${END}"
    echo -e
    echo -e "  ${BOLD}${ORANGE}WARNING  ${WHITE}You have not configured a valid IP address.${END}"
    echo -e "  ${BOLD}Open ${GREY2}${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}${END} and change ${ORANGE}XX.XX.XX.XX${END} to a real IP."
    echo -e
    echo -e "      ${BOLD}${GREY2}Line ${STR_LINE}     ${RED}${STR_FOUND}${END}"
    echo -e
    echo -e " ${BLUE}---------------------------------------------------------------------------------------------------${END}"
    echo -e

    exit 1
fi

# #
#   rootCA > Clean > certs.db
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_ROOTCA_BASE}-001${END}" "${GREY3}${LNG_STEP_CERTS}${END}" "${RED}›${END}" "${YELLOW3}${PATH_ROOTCA}/${FILE_ROOTCA_DB}.${EXT_TXT}${END}"
if [ -f "${PATH_ROOTCA}/${FILE_ROOTCA_DB}.${EXT_TXT}" ]; then
> "${PATH_ROOTCA}/${FILE_ROOTCA_DB}.${EXT_TXT}"
    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  > \"${PATH_ROOTCA}/${FILE_ROOTCA_DB}.${EXT_TXT}.${EXT_ATTR}\"${END}"
    fi
else
    touch "${PATH_ROOTCA}/${FILE_ROOTCA_DB}.${EXT_TXT}"
    chmod 600 "${PATH_ROOTCA}/${FILE_ROOTCA_DB}.${EXT_TXT}"

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  touch \"${PATH_ROOTCA}/${FILE_ROOTCA_DB}.${EXT_TXT}\"${END}"
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  chmod 600 \"${PATH_ROOTCA}/${FILE_ROOTCA_DB}.${EXT_TXT}\"${END}"
    fi
fi

# #
#   rootCA > Setup > certs.db.attr
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_ROOTCA_BASE}-002${END}" "${GREY3}${LNG_STEP_ATTRIBS}${END}" "${RED}›${END}" "${YELLOW3}${PATH_ROOTCA}/${FILE_ROOTCA_DB}.${EXT_TXT}.attr${END}"
if [ -f "${PATH_ROOTCA}/${FILE_ROOTCA_DB}.${EXT_TXT}.${EXT_ATTR}" ]; then
> "${PATH_ROOTCA}/${FILE_ROOTCA_DB}.${EXT_TXT}.${EXT_ATTR}"
    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  > \"${PATH_ROOTCA}/${FILE_ROOTCA_DB}.${EXT_TXT}.${EXT_ATTR}\"${END}"
    fi
else
    touch "${PATH_ROOTCA}/${FILE_ROOTCA_DB}.${EXT_TXT}.${EXT_ATTR}"

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  touch \"${PATH_ROOTCA}/${FILE_ROOTCA_DB}.${EXT_TXT}.${EXT_ATTR}\"${END}"
    fi
fi

echo "unique_subject = yes" > "${PATH_ROOTCA}/${FILE_ROOTCA_DB}.${EXT_TXT}.${EXT_ATTR}"

# #
#   rootCA > Reset > crlnumber
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_ROOTCA_BASE}-003${END}" "${GREY3}${LNG_STEP_CRL_RESET} 00${END}" "${RED}›${END}" "${YELLOW3}${PATH_ROOTCA}/${FILE_ROOTCA_CRLNUMBER}${END}"
if [ -f "${PATH_ROOTCA}/${FILE_ROOTCA_DB}.${EXT_TXT}" ]; then
    echo "00" > "${PATH_ROOTCA}/${FILE_ROOTCA_CRLNUMBER}"

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  echo \"00\" > \"${PATH_ROOTCA}/${FILE_ROOTCA_CRLNUMBER}\"${END}"
    fi
else
    touch "${PATH_ROOTCA}/${FILE_ROOTCA_CRLNUMBER}"
    echo "00" > "${PATH_ROOTCA}/${FILE_ROOTCA_CRLNUMBER}"

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  touch \"${PATH_ROOTCA}/${FILE_ROOTCA_CRLNUMBER}\"${END}"
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  echo \"00\" > \"${PATH_ROOTCA}/${FILE_ROOTCA_CRLNUMBER}\"${END}"
    fi
fi

# #
#   rootCA > Reset > serial
#
#   It is VITAL that no matter whether you're creating a new serial file, or resetting the existing one;
#       you MUST ensure the file is not empty; and at least has the value `0000`; otherwise the generation process
#       will error out.
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_ROOTCA_BASE}-004${END}" "${GREY3}${LNG_STEP_SERIAL_RESET} 00${END}" "${RED}›${END}" "${YELLOW3}${PATH_ROOTCA}/${FILE_ROOTCA_SERIAL}${END}"
if [ -f "${PATH_ROOTCA}/${FILE_ROOTCA_SERIAL}" ]; then
    echo "00" > "${PATH_ROOTCA}/${FILE_ROOTCA_SERIAL}"

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  echo \"00\" > \"${PATH_ROOTCA}/${FILE_ROOTCA_SERIAL}\"${END}"
    fi
else
    touch "${PATH_ROOTCA}/${FILE_ROOTCA_SERIAL}"
    echo "00" > "${PATH_ROOTCA}/${FILE_ROOTCA_SERIAL}"

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  touch \"${PATH_ROOTCA}/${FILE_ROOTCA_SERIAL}\"${END}"
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  echo \"00\" > \"${PATH_ROOTCA}/${FILE_ROOTCA_SERIAL}\"${END}"
    fi
fi

# #
#   rootCA > Delete > crlnumber.old
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_ROOTCA_BASE}-005${END}" "${GREY3}${LNG_STEP_FILE_DELETE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_ROOTCA}/${FILE_ROOTCA_CRLNUMBER}.${EXT_OLD}${END}"
if [ -f "${PATH_ROOTCA}/${FILE_ROOTCA_CRLNUMBER}.${EXT_OLD}" ]; then
    rm "${PATH_ROOTCA}/${FILE_ROOTCA_CRLNUMBER}.${EXT_OLD}"

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  rm \"${PATH_ROOTCA}/${FILE_ROOTCA_CRLNUMBER}.${EXT_OLD}\"${END}"
    fi
else
    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  Skipped${END}"
    fi
fi

# #
#   rootCA > Delete > certs.db.attr.old
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_ROOTCA_BASE}-006${END}" "${GREY3}${LNG_STEP_FILE_DELETE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_ROOTCA}/${FILE_ROOTCA_DB}.${EXT_TXT}.${EXT_ATTR}.${EXT_OLD}${END}"
if [ -f "${PATH_ROOTCA}/${FILE_ROOTCA_DB}.${EXT_TXT}.${EXT_ATTR}.${EXT_OLD}" ]; then
    rm "${PATH_ROOTCA}/${FILE_ROOTCA_DB}.${EXT_TXT}.${EXT_ATTR}.${EXT_OLD}"

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  rm \"${PATH_ROOTCA}/${FILE_ROOTCA_DB}.${EXT_TXT}.${EXT_ATTR}.${EXT_OLD}\"${END}"
    fi
else
    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  Skipped${END}"
    fi
fi

# #
#   rootCA > Delete > certs.db.old
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_ROOTCA_BASE}-007${END}" "${GREY3}${LNG_STEP_FILE_DELETE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_ROOTCA}/${FILE_ROOTCA_DB}.${EXT_TXT}.${EXT_OLD}${END}"
if [ -f "${PATH_ROOTCA}/${FILE_ROOTCA_DB}.${EXT_TXT}.${EXT_OLD}" ]; then
    rm "${PATH_ROOTCA}/${FILE_ROOTCA_DB}.${EXT_TXT}.${EXT_OLD}"

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  rm \"${PATH_ROOTCA}/${FILE_ROOTCA_DB}.${EXT_TXT}.${EXT_OLD}\"${END}"
    fi
else
    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  Skipped${END}"
    fi
fi

# #
#   rootCA > Delete > serial.old
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_ROOTCA_BASE}-008${END}" "${GREY3}${LNG_STEP_FILE_DELETE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_ROOTCA}/${FILE_ROOTCA_SERIAL}.${EXT_OLD}${END}"
if [ -f "${PATH_ROOTCA}/${FILE_ROOTCA_SERIAL}.${EXT_OLD}" ]; then
    rm "${PATH_ROOTCA}/${FILE_ROOTCA_SERIAL}.${EXT_OLD}"

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  rm \"${PATH_ROOTCA}/${FILE_ROOTCA_SERIAL}.${EXT_OLD}\"${END}"
    fi
else
    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  Skipped${END}"
    fi
fi

# #
#   rootCA                          Create > RSA        rootCA.key.main-01.enc.priv.pem
#   @search                         create-rsa-ecc
# #

if [ "${PARAM_MIXED}" == "true" ] || [ "${PARAM_ALGORITHM}" == "rsa" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_ROOTCA_BASE}-009${END}" "${GREY3}Generate Keys${END}" "${RED}›${END}" "${YELLOW3}${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}${END}"
    if ( set +f; ls ${PATH_ROOTCA_BASE}.*${SSL_KEY_MAIN01_ENC}* ) 1> /dev/null 2>&1; then
        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ⚠️ ‎ ‎  Skipped generating ${YELLOW3}${FILE_ROOTCA_BASE}${BLUE2} private key ${YELLOW3}${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}${BLUE2}, key already exists from previous generation${END}"
            echo -e
        fi
    else
        # openssl genrsa -aes256 -passout "pass:${PWD_OUT}" -out "${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}" ${PARAM_BITS}
        openssl genpkey -aes256 -algorithm RSA -pkeyopt rsa_keygen_bits:${PARAM_BITS} -out "${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}" -pass "pass:${PWD_RAW}"

        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl genpkey -aes256 -algorithm RSA -pkeyopt rsa_keygen_bits:${PARAM_BITS} -out \"${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}\" -pass \"pass:${PWD_RAW}\"${END}"
            echo -e
        fi
    fi
fi

# #
#   rootCA                          Create > RSA        rootCA.key.main-01.unc.priv.pem
#   @search                         create-unc-rsa
# #

if [ "${PARAM_MIXED}" == "true" ] || [ "${PARAM_ALGORITHM}" == "rsa" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_ROOTCA_BASE}-010${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_UNC}${END}"
    if ( set +f; ls ${PATH_ROOTCA_BASE}.*${SSL_KEY_MAIN01_UNC}* ) 1> /dev/null 2>&1; then
        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ⚠️ ‎ ‎  Skipped generating ${YELLOW3}${FILE_ROOTCA_BASE}${BLUE2} private key ${YELLOW3}${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_UNC}${BLUE2}, key already exists from previous generation${END}"
            echo -e
        fi
    else
        # #
        #   create rootCA.key.main-01.unc.priv.pem | PKCS8 Unencrypted Private Key
        #   -----BEGIN PRIVATE KEY-----
        # #

        openssl rsa -in "${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}" -out "${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_UNC}" -passin "pass:${PWD_IN}" -passout "pass:${PWD_OUT}"

        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl rsa -in \"${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}\"  -out \"${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_UNC}\" -passin \"pass:${PWD_IN}\" -passout \"pass:${PWD_OUT}\"${END}"
            echo -e
        fi

        # #
        #   create rootCA.key.rsa.pub.pem | PKCS8 Public Key (Unencrypted)
        #   -----BEGIN PUBLIC KEY-----
        # #

        openssl rsa -in "${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}" -pubout > "${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_RSA_PUB}" -passin "pass:${PWD_IN}" -passout "pass:${PWD_OUT}"

        # #
        #   create rootCA.key.rsa.unc.priv.pem | PKCS1 Private Key (Unencrypted)
        #   -----BEGIN RSA PRIVATE KEY-----
        # #

        openssl rsa -in "${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_UNC}" -out "${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_RSA_UNC_PRIV}" -traditional

        # #
        #   create rootCA.key.rsa.enc.priv.pem | PKCS1 Private Key (Encrypted)
        #   -----BEGIN RSA PRIVATE KEY-----
        # #

        openssl rsa -in "${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_UNC}" -out "${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_RSA_ENC_PRIV}" -traditional -aes256 -passout "pass:${PWD_OUT}" -passin "pass:${PWD_IN}"

    fi
fi

# #
#   rootCA                          Create > ECC        rootCA.key.main-01.enc.priv.pem
#                                                       rootCA.key.main-01.unc.priv.pem
#   
#   @search                         create-enc-ecc
#   @search                         create-unc-ecc
# #

if [ "${PARAM_MIXED}" == "false" ]; then
    if [ "${PARAM_ALGORITHM}" == "ec" ] || [ "${PARAM_ALGORITHM}" == "ecc" ] || [ "${PARAM_ALGORITHM}" == "ecdsa" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_ROOTCA_BASE}-011${END}" "${GREY3}Generate Keys${END}" "${RED}›${END}" "${YELLOW3}${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}${END}"
        # file already exists
        if ( set +f; ls ${PATH_ROOTCA_BASE}.*${SSL_KEY_MAIN01_ENC}* ) 1> /dev/null 2>&1; then
            if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
                printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ⚠️ ‎ ‎  Skipped generating ${YELLOW3}${FILE_ROOTCA_BASE}${BLUE2} private key ${YELLOW3}${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}${BLUE2}, key already exists from previous generation${END}"
                echo -e
            fi
        else
            openssl ecparam -genkey -name ${PARAM_CURVE} -noout -out "${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_UNC}"

            if [ -z "${PWD_IN}" ]; then
                echo
                echo -e "  ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
                echo -e
                echo -e "  ${BOLD}${ORANGE}WARNING ‎ ‎‎ ‎ ‎ ‎ ‎ ‎${WHITE}--passin Not Provided${END}"
                echo -e "  ${WHITE}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎To create an ECC password protected key, you must append ${BLUE}--passin "PASSWORD"${WHITE}${END}"
                echo -e "  ${BOLD}${GREY2}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎${app_file_this} --new --algorithm \"ecc\" --passin \"YOUR_PASSWORD\" --passout \"YOUR_PASSWORD\"${END}"
                echo -e
                echo -e "  ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
                echo

                exit 1
            fi

            if [ -z "${PWD_OUT}" ]; then
                echo
                echo -e "  ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
                echo -e
                echo -e "  ${BOLD}${ORANGE}WARNING ‎ ‎‎ ‎ ‎ ‎ ‎ ‎${WHITE}--passout Not Provided${END}"
                echo -e "  ${WHITE}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎To create an ECC password protected key, you must append ${BLUE}--passout "PASSWORD"${WHITE}${END}"
                echo -e "  ${BOLD}${GREY2}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎${app_file_this} --new --algorithm \"ecc\" --passin \"YOUR_PASSWORD\" --passout \"YOUR_PASSWORD\"${END}"
                echo -e
                echo -e "  ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
                echo

                exit 1
            fi

            openssl ec -in "${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_UNC}" -out "${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}" -aes256 -passout "pass:${PWD_OUT}" -passin "pass:${PWD_IN}"

            if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
                printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl ecparam -genkey -name ${PARAM_CURVE} -noout -out \"${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_UNC}\"${END}"
                printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl ec -in \"${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_UNC}\" -out \"${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}\" -aes256 -passout pass:\"${PWD_OUT}\" -passin pass:\"${PWD_IN}\"${END}"
                echo -e
            fi
        fi
    fi
fi

# #
#   rootCA > Create > rootCA.crt
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_ROOTCA_BASE}-012${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_ROOTCA_BASE}.${EXT_CRT}${END}"
openssl req -config "${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}" -key "${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}" -new -x509 -days ${PARAM_DAYS} -${PARAM_MD_ROOT} -section ${SECTION_ROOT} -extensions ${EXTENSION_ROOT} -out "${PATH_ROOTCA_BASE}.${EXT_CRT}" -passout "pass:${PWD_OUT}" -passin "pass:${PWD_IN}" --batch

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl req -config \"${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}\" -key \"${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}\" -new -x509 -days ${PARAM_DAYS} -${PARAM_MD_ROOT} -section ${SECTION_ROOT} -extensions ${EXTENSION_ROOT} -out \"${PATH_ROOTCA_BASE}.${EXT_CRT}\" -passout pass:\"${PWD_OUT}\" -passin pass:\"${PWD_IN}\" --batch${END}"
    echo -e
fi

# #
#   rootCA > Create > rootCA.pfx
#
#   rootCA -name should use "CompanyName Certificate Authority"
#   domain -name should use "CompanyName Domain Authority"
#   auth -name should use "CompanyName Authentication Authority"
#   bitlocker -name should use "CompanyName Encryption Authority"
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_ROOTCA_BASE}-013${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_ROOTCA_BASE}.${EXT_PFX}${END}"
openssl pkcs12 -export -name "${PARAM_FRIENDLY} Certificate Authority" -in "${PATH_ROOTCA_BASE}.${EXT_CRT}" -inkey "${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}" -out "${PATH_ROOTCA_BASE}.${EXT_PFX}" -passin "pass:${PWD_IN}" -password "pass:${PWD_RAW}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl pkcs12 -export -name \"${PARAM_FRIENDLY} Certificate Authority\" -in \"${PATH_ROOTCA_BASE}.${EXT_CRT}\" -inkey \"${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}\" -out \"${PATH_ROOTCA_BASE}.${EXT_PFX}\" -passin pass:\"${PWD_IN}\" -password pass:\"${PWD_RAW}\"${END}"
    echo -e
fi

# #
#   rootCA                          Create > crl/rootCA.crl.pem
#   @search                         create-crl-pem
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_ROOTCA_BASE}-014${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_ROOTCA_SUB_CRL}/${FILE_ROOTCA_BASE}.${SSL_EXT_CRL_PEM}${END}"
openssl ca -gencrl -config "${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}" -keyfile "${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}" -cert "${PATH_ROOTCA_BASE}.${EXT_CRT}" -out "${PATH_ROOTCA_SUB_CRL}/${FILE_ROOTCA_BASE}.${SSL_EXT_CRL_PEM}" -passin "pass:${PWD_IN}" -batch

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl ca -gencrl -config \"${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}\" -keyfile \"${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}\" -cert \"${PATH_ROOTCA_BASE}.${EXT_CRT}\" -out \"${PATH_ROOTCA_SUB_CRL}/${FILE_ROOTCA_BASE}.${SSL_EXT_CRL_PEM}\" -passin pass:\"${PWD_IN}\" -batch${END}"
    echo -e
fi

# #
#   rootCA                          Create > crl/rootCA.crl
#   @search                         create-crl
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_ROOTCA_BASE}-015${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_ROOTCA_SUB_CRL}/${FILE_ROOTCA_BASE}.${EXT_CRL}${END}"
openssl crl -inform PEM -in "${PATH_ROOTCA_SUB_CRL}/${FILE_ROOTCA_BASE}.${SSL_EXT_CRL_PEM}" -outform DER -out "${PATH_ROOTCA_SUB_CRL}/${FILE_ROOTCA_BASE}.${EXT_CRL}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl crl -inform PEM -in \"${PATH_ROOTCA_SUB_CRL}/${FILE_ROOTCA_BASE}.${SSL_EXT_CRL_PEM}\" -outform DER -out \"${PATH_ROOTCA_SUB_CRL}/${FILE_ROOTCA_BASE}.${EXT_CRL}\"${END}"
    echo -e
fi

# #
#   Mixed > Change OpenSSL Config Files
#
#   If running in mixed mode, we need to change over to the rootCA-ecc config file after the rootCA
#   cert and keys are generated so that the remaining certs can be made using ecc instead of rsa
# #

if [ "${PARAM_MIXED}" == "true" ]; then
    PARAM_CNF_ROOTCA="${FILE_ROOTCA_CNF}-ecc.${EXT_CNF}"
    PARAM_CNF_BITLOCKER="${FILE_BITLOCKER_CNF}-ecc.${EXT_CNF}"
fi

# #
#   Domain > Create > RSA           domain.key.main-01.enc.priv.pem
#   @search                         create-enc-rsa
# #

if [ "${PARAM_MIXED}" == "false" ] && [ "${PARAM_ALGORITHM}" == "rsa" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_DOMAIN_BASE}-001${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_ENC}${END}"
    if ( set +f; ls ${PATH_DOMAIN_BASE}.*${SSL_KEY_MAIN01_ENC}* ) 1> /dev/null 2>&1; then
        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ⚠️ ‎ ‎  Skipped generating ${YELLOW3}${FILE_DOMAIN_BASE}${BLUE2} private key ${YELLOW3}${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_ENC}${GREEN}, key already exists from previous generation${END}"
            echo -e
        fi
    else
        openssl genpkey -aes256 -algorithm RSA -pkeyopt rsa_keygen_bits:${PARAM_BITS} -out "${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_ENC}" -pass "pass:${PWD_RAW}"

        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl genpkey -aes256 -algorithm RSA -pkeyopt rsa_keygen_bits:${PARAM_BITS} -out \"${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_ENC}\" -pass \"pass:${PWD_RAW}\"${END}"
            echo -e
        fi
    fi
fi

# #
#   Domain                          Create > RSA > domain.key.main-01.unc.priv.pem
#   @search                         create-unc-rsa
# #

if [ "${PARAM_MIXED}" == "false" ] && [ "${PARAM_ALGORITHM}" == "rsa" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_DOMAIN_BASE}-002${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_UNC}${END}"
    if ( set +f; ls ${PATH_DOMAIN_BASE}.*${SSL_KEY_MAIN01_UNC}* ) 1> /dev/null 2>&1; then
        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ⚠️ ‎ ‎  Skipped generating ${YELLOW3}${FILE_DOMAIN_BASE}${BLUE2} private key ${YELLOW3}${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_UNC}${GREEN}, key already exists from previous generation${END}"
            echo -e
        fi
    else
        openssl rsa -in "${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_ENC}"  -out "${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_UNC}" -passin "pass:${PWD_IN}" -passout "pass:${PWD_OUT}"

        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl rsa -in \"${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_ENC}\"  -out \"${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_UNC}\" -passin \"pass:${PWD_IN}\" -passout \"pass:${PWD_OUT}\"${END}"
            echo -e
        fi
    fi
fi

# #
#   Domain                          Create > ECC > domain.key.main-01.enc.priv.pem
#   @search                         create-enc-ecc
# #

if [ "${PARAM_MIXED}" == "true" ] || [ "${PARAM_ALGORITHM}" == "ec" ] || [ "${PARAM_ALGORITHM}" == "ecc" ] || [ "${PARAM_ALGORITHM}" == "ecdsa" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_DOMAIN_BASE}-001${END}" "${GREY3}Generate Keys${END}" "${RED}›${END}" "${YELLOW3}${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_ENC}${END}"
    # file already exists
    if ( set +f; ls ${PATH_DOMAIN_BASE}.*${SSL_KEY_MAIN01_ENC}* ) 1> /dev/null 2>&1; then
        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ⚠️ ‎ ‎  Skipped generating ${YELLOW3}${FILE_DOMAIN_BASE}${BLUE2} private key ${YELLOW3}${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_ENC}${BLUE2}, key already exists from previous generation${END}"
            echo -e
        fi
    else
        openssl ecparam -genkey -name ${PARAM_CURVE} -noout -out "${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_UNC}"

        if [ -z "${PWD_IN}" ]; then
            echo
            echo -e "  ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
            echo -e
            echo -e "  ${BOLD}${ORANGE}WARNING ‎ ‎‎ ‎ ‎ ‎ ‎ ‎${WHITE}--passin Not Provided${END}"
            echo -e "  ${WHITE}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎To create an ECC password protected key, you must append ${BLUE}--passin "PASSWORD"${WHITE}${END}"
            echo -e "  ${BOLD}${GREY2}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎${app_file_this} --new --algorithm \"ecc\" --passin \"YOUR_PASSWORD\" --passout \"YOUR_PASSWORD\"${END}"
            echo -e
            echo -e "  ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
            echo

            exit 1
        fi

        if [ -z "${PWD_OUT}" ]; then
            echo
            echo -e "  ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
            echo -e
            echo -e "  ${BOLD}${ORANGE}WARNING ‎ ‎‎ ‎ ‎ ‎ ‎ ‎${WHITE}--passout Not Provided${END}"
            echo -e "  ${WHITE}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎To create an ECC password protected key, you must append ${BLUE}--passout "PASSWORD"${WHITE}${END}"
            echo -e "  ${BOLD}${GREY2}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎${app_file_this} --new --algorithm \"ecc\" --passin \"YOUR_PASSWORD\" --passout \"YOUR_PASSWORD\"${END}"
            echo -e
            echo -e "  ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
            echo

            exit 1
        fi

        openssl ec -in "${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_UNC}" -out "${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_ENC}" -aes256 -passout "pass:${PWD_OUT}" -passin "pass:${PWD_IN}"

        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl ecparam -genkey -name ${PARAM_CURVE} -noout -out \"${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_UNC}\"${END}"
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl ec -in \"${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_UNC}\" -out \"${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_ENC}\" -aes256 -passout pass:\"${PWD_OUT}\" -passin pass:\"${PWD_IN}\"${END}"
            echo -e
        fi
    fi
fi

# #
#   Domain                          Create > domain.csr
#   @search                         create-csr
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_DOMAIN_BASE}-003${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_DOMAIN_BASE}.${EXT_CSR}${END}"
openssl req -${PARAM_MD_SUB} -new -key "${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_ENC}" -config "${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}" -section ${SECTION_DOMAIN} -out "${PATH_DOMAIN_BASE}.${EXT_CSR}" -passout "pass:${PWD_OUT}" -passin "pass:${PWD_IN}" --batch

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl req -${PARAM_MD_SUB} -new -key \"${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_ENC}\" -config \"${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}\" -section ${SECTION_DOMAIN} -out \"${PATH_DOMAIN_BASE}.${EXT_CSR}\" -passout pass:\"${PWD_OUT}\" -passin pass:\"${PWD_IN}\" --batch${END}"
    echo -e
fi

# #
#   Domain                          Create > domain.crt
#   @search                         register-crt
#
#   creates certificate, registers the cert within the rootCA certs.db.
#   you must remove the certificate from the certs.db to run this again.
#   .crt file does NOT have the Bag Attributes at the top.
#
#   this command must run last, otherwise it wont generate cert serial
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_DOMAIN_BASE}-004${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_DOMAIN_BASE}.${EXT_CRT}${END}"
printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  Loading --config \"${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}\"${END}"

openssl ca -config "${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}" -multivalue-rdn -preserveDN -extensions ${EXTENSION_DOMAIN} -days ${PARAM_DAYS} -notext -md ${PARAM_MD_SUB} -in "${PATH_DOMAIN_BASE}.${EXT_CSR}" -out "${PATH_DOMAIN_BASE}.${EXT_CRT}" -passin "pass:${PWD_IN}" -batch 1> /dev/null 2>&1

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl ca -config \"${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}\" -multivalue-rdn -preserveDN -extensions ${EXTENSION_DOMAIN} -days ${PARAM_DAYS} -notext -md ${PARAM_MD_SUB} -in \"${PATH_DOMAIN_BASE}.${EXT_CSR}\" -out \"${PATH_DOMAIN_BASE}.${EXT_CRT}\" -passin pass:\"${PWD_IN}\" -batch${END}"
    echo -e
fi

# #
#   Domain                          Create > domain.keystore.normal.pfx
#   @search                         create-pfx-normal
#
#   rootCA -name should use "CompanyName Certificate Authority"
#   domain -name should use "CompanyName Domain Authority"
#   auth -name should use "CompanyName Authentication Authority"
#   bitlocker -name should use "CompanyName Encryption Authority"
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_DOMAIN_BASE}-005${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_PFX}${END}"
openssl pkcs12 -export -name "${PARAM_FRIENDLY} Domain Authority" -in "${PATH_DOMAIN_BASE}.${EXT_CRT}" -inkey "${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_ENC}" -out "${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_PFX}" -passin "pass:${PWD_IN}" -password "pass:${PWD_RAW}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl pkcs12 -export -name \"${PARAM_FRIENDLY} Domain Authority\" -in \"${PATH_DOMAIN_BASE}.${EXT_CRT}\" -inkey \"${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_ENC}\" -out \"${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_PFX}\" -passin pass:\"${PWD_IN}\" -password pass:\"${PWD_RAW}\"${END}"
    echo -e
fi

# #
#   Domain                          Create > domain.crt
#   @search                         create-crt
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_DOMAIN_BASE}-006${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_DOMAIN_BASE}.${EXT_CRT}${END}"
openssl pkcs12 -in "${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_PFX}" -clcerts -nokeys -out "${PATH_DOMAIN_BASE}.${EXT_CRT}" -passin "pass:${PWD_IN}" -password "pass:${PWD_RAW}" -passout "pass:${PWD_OUT}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl pkcs12 -in \"${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_PFX}\" -clcerts -nokeys -out \"${PATH_DOMAIN_BASE}.${EXT_CRT}\" -passin pass:\"${PWD_IN}\" -password pass:\"${PWD_RAW}\" -passout pass:\"${PWD_OUT}\"${END}"
    echo -e
fi

# #
#   Domain                          Remove > domain.keystore.base64.pfx
#   @search                         remove-pfx-base64
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_DOMAIN_BASE}-007${END}" "${GREY3}${LNG_STEP_FILE_REMOVE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_B64}${END}"
if [ -f "${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_B64}" ]; then
    rm "${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_B64}"

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  rm \"${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_B64}\"${END}"
        echo -e
    fi
else
    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  Skipped${END}"
        echo -e
    fi
fi

# #
#   Domain                          Create > domain.keystore.base64.pfx
#   @search                         create-pfx-base64
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_DOMAIN_BASE}-008${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_B64}${END}"
cat "${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_PFX}" | base64 > "${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_B64}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  cat \"${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_PFX}\" | base64 > \"${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_B64}\"${END}"
    echo -e
fi

# #
#   Domain                          Create > domain.keystore.p12
#   @search                         create-p12
#
#   @note       : p12 file is the same keystore as pfx.
# #

# #
#   printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Domain${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_P12}${END}"
#   openssl pkcs12 -export -in "${PATH_DOMAIN_BASE}.${EXT_CRT}" -inkey "${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_ENC}" -out "${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_P12}" -passin "pass:${PWD_IN}" -password "pass:${PWD_RAW}" -passout "pass:${PWD_OUT}"
# 
#   if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
#       echo ‎ ‎${GREY2} ↳  openssl pkcs12 -export -in \"${PATH_DOMAIN_BASE}.${EXT_CRT}\" -inkey \"${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN01_ENC}\" -out \"${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_P12}\" -passin pass:\"${PWD_IN}\" -password pass:\"${PWD_RAW}\" -passout pass:\"${PWD_OUT}\"
#       echo -e
#   fi
# #

# #
#   Domain                          Create > domain.keycert.main-01.enc.priv.pem
#   @search                         create-keycert-enc-main-01
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_DOMAIN_BASE}-009${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_DOMAIN_BASE}.${SSL_KEYCERT_MAIN01_ENC}${END}"
openssl pkcs12 -in "${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_PFX}" -aes-256-cbc -out "${PATH_DOMAIN_BASE}.${SSL_KEYCERT_MAIN01_ENC}" -passin "pass:${PWD_IN}" -password "pass:${PWD_RAW}" -passout "pass:${PWD_OUT}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl pkcs12 -in \"${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_PFX}\" -aes-256-cbc -out \"${PATH_DOMAIN_BASE}.${SSL_KEYCERT_MAIN01_ENC}\" -passin pass:\"${PWD_IN}\" -password pass:\"${PWD_RAW}\" -passout pass:\"${PWD_OUT}\"${END}"
    echo -e
fi

# #
#   Domain                          Create > domain.keycert.main-01.unc.priv.pem
#   @search                         create-keycert-unc-main-01
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_DOMAIN_BASE}-010${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_DOMAIN_BASE}.${SSL_KEYCERT_MAIN01_UNC}${END}"
openssl pkcs12 -in "${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_PFX}" -nodes -out "${PATH_DOMAIN_BASE}.${SSL_KEYCERT_MAIN01_UNC}" -passin "pass:${PWD_IN}" -password "pass:${PWD_RAW}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl pkcs12 -in \"${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_PFX}\" -nodes -out \"${PATH_DOMAIN_BASE}.${SSL_KEYCERT_MAIN01_UNC}\" -passin pass:\"${PWD_IN}\" -password pass:\"${PWD_RAW}\"${END}"
    echo -e
fi

# #
#   Domain                          Create > domain.key.main-02.enc.priv.pem
#   @search                         create-key-enc-main-02
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_DOMAIN_BASE}-011${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN02_ENC}${END}"
openssl pkcs12 -in "${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_PFX}" -nocerts -out "${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN02_ENC}" -passin "pass:${PWD_IN}" -password "pass:${PWD_RAW}" -passout "pass:${PWD_OUT}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl pkcs12 -in \"${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_PFX}\" -nocerts -out \"${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN02_ENC}\" -passin pass:\"${PWD_IN}\" -password pass:\"${PWD_RAW}\" -passout pass:\"${PWD_OUT}\"${END}"
    echo -e
fi

# #
#   Domain                          Create > domain.key.main-02.unc.priv.pem
#   @search                         create-key-unc-main-02
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_DOMAIN_BASE}-012${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN02_UNC}${END}"
openssl pkcs12 -in "${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_PFX}" -nocerts -nodes -out "${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN02_UNC}" -passin "pass:${PWD_IN}" -password "pass:${PWD_RAW}" -passout "pass:${PWD_OUT}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl pkcs12 -in \"${PATH_DOMAIN_BASE}.${SSL_KEYSTORE_PFX}\" -nocerts -nodes -out \"${PATH_DOMAIN_BASE}.${SSL_KEY_MAIN02_UNC}\" -passin pass:\"${PWD_IN}\" -password pass:\"${PWD_RAW}\" -passout pass:\"${PWD_OUT}\"${END}"
    echo -e
fi

# #
#   Domain                          Assign OpenSSH Private File
#   @search                         assign-openssh-priv
#
#   ECC keys do not have RSA.
#
#   To generate the public OpenSSH key for RSA, we use the OpenSSH private key.
#   Since ECC can't generate an OpenSSH private key from RSA, we need to tell the script which file to use to generate our ECC OpenSSH public key
# #

if [ "${PARAM_MIXED}" == "true" ] || [ "${PARAM_ALGORITHM}" == "ec" ] || [ "${PARAM_ALGORITHM}" == "ecc" ] || [ "${PARAM_ALGORITHM}" == "ecdsa" ]; then
    SSL_KEY_RSA_PRIV="${SSL_KEY_MAIN01_UNC}"
fi

# #
#   Domain                          RSA Keys
#   @search                         create-keys-rsa
#
#   RSA keys get extra RSA keys/certs
# #

if [ "${PARAM_MIXED}" == "false" ] && [ "${PARAM_ALGORITHM}" == "rsa" ]; then

    # #
    #   Domain                          Create > domain.key.rsa.priv.pem
    #   @search                         create-keys-rsa-priv-pem
    # #

    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_DOMAIN_BASE}-013${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_DOMAIN_BASE}.${SSL_KEY_RSA_PRIV}${END}"
    openssl rsa -in "${PATH_DOMAIN_BASE}.${SSL_KEYCERT_MAIN01_ENC}" -out "${PATH_DOMAIN_BASE}.${SSL_KEY_RSA_PRIV}" -outform PEM -traditional -passin "pass:${PWD_IN}" -passout "pass:${PWD_OUT}"

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl rsa -in \"${PATH_DOMAIN_BASE}.${SSL_KEYCERT_MAIN01_ENC}\" -out \"${PATH_DOMAIN_BASE}.${SSL_KEY_RSA_PRIV}\" -outform PEM -traditional -passin pass:\"${PWD_IN}\" -passout pass:\"${PWD_OUT}\"${END}"
        echo -e
    fi

    # #
    #   Domain                          Create > domain.key.rsa.pub.pem
    #   @search                         create-keys-rsa-pub-pem
    # #

    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_DOMAIN_BASE}-014${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_DOMAIN_BASE}.${SSL_KEY_RSA_PUB}${END}"
    openssl rsa -in "${PATH_DOMAIN_BASE}.${SSL_KEYCERT_MAIN01_ENC}" -pubout > "${PATH_DOMAIN_BASE}.${SSL_KEY_RSA_PUB}" -passin "pass:${PWD_IN}" -passout "pass:${PWD_OUT}"

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl rsa -in \"${PATH_DOMAIN_BASE}.${SSL_KEYCERT_MAIN01_ENC}\" -pubout > \"${PATH_DOMAIN_BASE}.${SSL_KEY_RSA_PUB}\" -passin pass:\"${PWD_IN}\" -passout pass:\"${PWD_OUT}\"${END}"
        echo -e
    fi

fi

# #
#   Domain                          Create > domain.key.openssh.priv.pem
#   @search                         create-keys-openssh-priv-pem
#
#   also known as id_rsa
#   password must be at least five characters
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_DOMAIN_BASE}-015${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV}${END}"
if [ -n "$PWD_RAW" ] && (( ${#PWD_RAW} > 4 )) ; then
    if [ -f "${PATH_DOMAIN_BASE}.${SSL_KEY_RSA_PRIV}" ]; then
        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  cp \"${PATH_DOMAIN_BASE}.${SSL_KEY_RSA_PRIV}\" \"${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV}\"${END}"
        fi
        cp "${PATH_DOMAIN_BASE}.${SSL_KEY_RSA_PRIV}" "${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV}"

        # ------------------

        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ssh-keygen -p -m PEM -P \"${PWD_RAW}\" -N \"${PWD_RAW}\" -f \"${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV}\"${END}"
        fi
        SSH_CMD_1=$(ssh-keygen -p -m PEM -P "${PWD_RAW}" -N "${PWD_RAW}" -f "${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV}")
        IFS=$'\n' read -d '' -r -a OUTPUT1 <<< "$SSH_CMD_1"

        for (( i=0; i<${#OUTPUT1[@]}; i++ ))
        do
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  💬 ${OUTPUT1[$i]}${END}"
        done

        # ------------------

        if [ -n "$PARAM_COMMENT" ]; then
            openssh_comment="${PARAM_COMMENT}"

            #   append friendly name to end of openssh comment
            if [ -n "$PARAM_FRIENDLY" ]; then
                openssh_comment="${openssh_comment} - ${PARAM_FRIENDLY}"
            fi

            cert_fingerprint=$(openssl x509 -in "${PATH_DOMAIN_BASE}.${EXT_CRT}" -noout -fingerprint | cut -d= -f2 | sed 's/://g' )

            if [ -n "$cert_fingerprint" ]; then
                openssh_comment="${openssh_comment} (${cert_fingerprint})"
            fi

            if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
                printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ssh-keygen -c -C \"${openssh_comment}\" -P \"${PWD_RAW}\" -f  \"${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV}\"${END}"
            fi

            SSH_CMD_2=$(ssh-keygen -c -C "${openssh_comment}" -P "${PWD_RAW}" -f  "${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV}")
            IFS=$'\n' read -d '' -r -a OUTPUT2 <<< "$SSH_CMD_2"

            for (( i=0; i<${#OUTPUT2[@]}; i++ ))
            do
                printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  💬 ${OUTPUT2[$i]}${END}"
            done
        fi

        # ------------------

        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  chmod 600 \"${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV}\"${END}"
        fi

        chmod 600 "${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV}"

        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            echo -e
        fi
    else
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ⚠️ ‎ ‎  Skipped copying OpenSSL file ${YELLOW3}${FILE_DOMAIN_BASE}.${SSL_KEY_RSA_PRIV}${RED2} to ${BLUE2}${FILE_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV}${END}"
        echo -e
    fi
else
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ⚠️ ‎ ‎  Skipped generating OpenSSL file ${YELLOW3}${FILE_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV}${RED2}, no ${BLUE}--password${RED2} provided${END}"
    echo -e
fi

# #
#   Domain                          Create > domain.key.openssh.priv.nopwd.pem
#   @search                         create-keys-openssh-priv-nopwd-pem
#
#   also known as id_rsa
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_DOMAIN_BASE}-016${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}${END}"
if [ -f "${PATH_DOMAIN_BASE}.${SSL_KEY_RSA_PRIV}" ]; then
    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  cp \"${PATH_DOMAIN_BASE}.${SSL_KEY_RSA_PRIV}\" \"${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}\"${END}"
    fi
    cp "${PATH_DOMAIN_BASE}.${SSL_KEY_RSA_PRIV}" "${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}"

    # ------------------

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ssh-keygen -p -m PEM -N \"\" -f \"${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}\"${END}"
    fi
    SSH_CMD_1=$(ssh-keygen -p -m PEM -N "" -f "${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}")
    IFS=$'\n' read -d '' -r -a OUTPUT1 <<< "$SSH_CMD_1"

    for (( i=0; i<${#OUTPUT1[@]}; i++ ))
    do
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  💬 ${OUTPUT1[$i]}${END}"
    done

    # ------------------

    if [ -n "$PARAM_COMMENT" ]; then
        openssh_comment="${PARAM_COMMENT}"

        #   append friendly name to end of openssh comment
        if [ -n "$PARAM_FRIENDLY" ]; then
            openssh_comment="${openssh_comment} - ${PARAM_FRIENDLY}"
        fi

        cert_fingerprint=$(openssl x509 -in "${PATH_DOMAIN_BASE}.${EXT_CRT}" -noout -fingerprint | cut -d= -f2 | sed 's/://g' )

        if [ -n "$cert_fingerprint" ]; then
            openssh_comment="${openssh_comment} (${cert_fingerprint})"
        fi

        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ssh-keygen -c -C \"${openssh_comment}\" -P \"${PWD_RAW}\" -f  \"${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}\"${END}"
        fi

        SSH_CMD_2=$(ssh-keygen -c -C "${openssh_comment}" -P "${PWD_RAW}" -f  "${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}")
        IFS=$'\n' read -d '' -r -a OUTPUT2 <<< "$SSH_CMD_2"

        for (( i=0; i<${#OUTPUT2[@]}; i++ ))
        do
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  💬 ${OUTPUT2[$i]}${END}"
        done
    fi

    # ------------------

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  chmod 600 \"${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}\"${END}"
    fi

    chmod 600 "${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}"

    # ------------------

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        echo -e
    fi
else
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  Skipped generating OpenSSL file ${YELLOW3}${FILE_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}${RED2} 📄  requires ${BLUE2}${FILE_DOMAIN_BASE}.${SSL_KEY_RSA_PRIV}${END}"
    echo -e
fi

# #
#   Domain                          Create > domain.key.openssh.pub
#   @search                         create-keys-openssh-pub-pem
#
#   also known as id_rsa.pub
#   
#   -y      Read a private OpenSSH format file and print an OpenSSH public key to stdout. 
#   -P      passphrase - Provides the (old) passphrase
#   -f      filename - Specifies the filename of the key file. 
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_DOMAIN_BASE}-017${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PUB}${END}"

if [ -f "${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}" ]; then
    ssh-keygen -P "${PWD_RAW}" -f "${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}" -y > "${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PUB}"

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ssh-keygen -P \"${PWD_RAW}\" -f \"${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}\" -y > \"${PATH_DOMAIN_BASE}.${SSL_KEY_SSH_PUB}\"${END}"
        echo -e
    fi
else
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ⚠️ ‎ ‎  Skipped generating OpenSSL file ${YELLOW3}${FILE_DOMAIN_BASE}.${SSL_KEY_SSH_PUB}${RED2} 📄  requires ${BLUE2}${FILE_DOMAIN_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}${END}"
    echo -e
fi

# #
#   Domain                          Create > crl/domain.crl.pem
#   @search                         create-crl-pem
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_DOMAIN_BASE}-018${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_ROOTCA_SUB_CRL}/${FILE_DOMAIN_BASE}.${SSL_EXT_CRL_PEM}${END}"
openssl ca -gencrl -config "${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}" -keyfile "${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}" -cert "${PATH_ROOTCA_BASE}.${EXT_CRT}" -out "${PATH_ROOTCA_SUB_CRL}/${FILE_DOMAIN_BASE}.${SSL_EXT_CRL_PEM}" -passin "pass:${PWD_IN}" -batch

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl ca -gencrl -config \"${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}\" -keyfile \"${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}\" -cert \"${PATH_ROOTCA_BASE}.${EXT_CRT}\" -out \"${PATH_ROOTCA_SUB_CRL}/${FILE_DOMAIN_BASE}.${SSL_EXT_CRL_PEM}\" -passin pass:\"${PWD_IN}\" -batch${END}"
    echo -e
fi

# #
#   Domain                          Create > crl/domain.crl
#   @search                         create-crl
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_DOMAIN_BASE}-019${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_ROOTCA_SUB_CRL}/${FILE_DOMAIN_BASE}.${EXT_CRL}${END}"
openssl crl -inform PEM -in "${PATH_ROOTCA_SUB_CRL}/${FILE_DOMAIN_BASE}.${SSL_EXT_CRL_PEM}" -outform DER -out "${PATH_ROOTCA_SUB_CRL}/${FILE_DOMAIN_BASE}.${EXT_CRL}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl crl -inform PEM -in \"${PATH_ROOTCA_SUB_CRL}/${FILE_DOMAIN_BASE}.${SSL_EXT_CRL_PEM}\" -outform DER -out \"${PATH_ROOTCA_SUB_CRL}/${FILE_DOMAIN_BASE}.${EXT_CRL}\"${END}"
    echo -e
fi

# #
#   Domain                          domain.Fullchain.pem
#   @search                         create-fullchain
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_DOMAIN_BASE}-020${END}" "${GREY3}${LNG_STEP_CHAIN_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_DOMAIN}/${SSL_CERT_FULLCHAIN}${END}"
> "${PATH_DOMAIN}/${FILE_DOMAIN_BASE}.${SSL_CERT_FULLCHAIN}"
cat "${PATH_DOMAIN_BASE}.${EXT_CRT}" >> "${PATH_DOMAIN}/${FILE_DOMAIN_BASE}.${SSL_CERT_FULLCHAIN}"
cat "${PATH_ROOTCA_BASE}.${EXT_CRT}" >> "${PATH_DOMAIN}/${FILE_DOMAIN_BASE}.${SSL_CERT_FULLCHAIN}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  cat \"${PATH_DOMAIN_BASE}.${EXT_CRT}\" >> \"${PATH_DOMAIN}/${FILE_DOMAIN_BASE}.${SSL_CERT_FULLCHAIN}\"${END}"
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  cat \"${PATH_ROOTCA_BASE}.${EXT_CRT}\" >> \"${PATH_DOMAIN}/${FILE_DOMAIN_BASE}.${SSL_CERT_FULLCHAIN}\"${END}"
    echo -e
fi

# #
#   Authentication                  Create > RSA > 9a.key.main-01.enc.priv.pem
#   @search                         create-enc-rsa
# #

if [ "${PARAM_MIXED}" == "false" ] && [ "${PARAM_ALGORITHM}" == "rsa" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_AUTH_BASE}-001${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_AUTH_BASE}.${SSL_KEY_MAIN01_ENC}${END}"
    if ( set +f; ls ${PATH_AUTH_BASE}.*${SSL_KEY_MAIN01_ENC}* ) 1> /dev/null 2>&1; then
        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ⚠️ ‎ ‎  Skipped generating ${YELLOW3}${FILE_AUTH_BASE}${BLUE2} private key ${YELLOW3}${FILE_AUTH_BASE}.${SSL_KEY_MAIN01_ENC}${GREEN}, key already exists from previous generation${END}"
            echo -e
        fi
    else
        openssl genpkey -aes256 -algorithm RSA -pkeyopt rsa_keygen_bits:${PARAM_BITS} -out "${PATH_AUTH_BASE}.${SSL_KEY_MAIN01_ENC}" -pass "pass:${PWD_RAW}"

        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl genpkey -aes256 -algorithm RSA -pkeyopt rsa_keygen_bits:${PARAM_BITS} -out \"${PATH_AUTH_BASE}.${SSL_KEY_MAIN01_ENC}\" -pass \"pass:${PWD_RAW}\"${END}"
            echo -e
        fi
    fi
fi

# #
#   Authentication                  Create > RSA > 9a.key.main-01.unc.priv.pem
#   @search                         create-unc-rsa
# #

if [ "${PARAM_MIXED}" == "false" ] && [ "${PARAM_ALGORITHM}" == "rsa" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_AUTH_BASE}-002${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_AUTH_BASE}.${SSL_KEY_MAIN01_UNC}${END}"
    if ( set +f; ls ${PATH_AUTH_BASE}.*${SSL_KEY_MAIN01_UNC}* ) 1> /dev/null 2>&1; then
        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ⚠️ ‎ ‎  Skipped generating ${YELLOW3}${FILE_AUTH_BASE}${BLUE2} private key ${YELLOW3}${FILE_AUTH_BASE}.${SSL_KEY_MAIN01_UNC}${GREEN}, key already exists from previous generation${END}"
            echo -e
        fi
    else
        openssl rsa -in "${PATH_AUTH_BASE}.${SSL_KEY_MAIN01_ENC}"  -out "${PATH_AUTH_BASE}.${SSL_KEY_MAIN01_UNC}" -passin "pass:${PWD_IN}" -passout "pass:${PWD_OUT}"

        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl rsa -in \"${PATH_AUTH_BASE}.${SSL_KEY_MAIN01_ENC}\"  -out \"${PATH_AUTH_BASE}.${SSL_KEY_MAIN01_UNC}\" -passin \"pass:${PWD_IN}\" -passout \"pass:${PWD_OUT}\"${END}"
            echo -e
        fi
    fi
fi

# #
#   Authentication                  Create > ECC > domain.key.main-01.enc.priv.pem
#   @search                         create-enc-ecc
# #

if [ "${PARAM_MIXED}" == "true" ] || [ "${PARAM_ALGORITHM}" == "ec" ] || [ "${PARAM_ALGORITHM}" == "ecc" ] || [ "${PARAM_ALGORITHM}" == "ecdsa" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_AUTH_BASE}-001${END}" "${GREY3}Generate Keys${END}" "${RED}›${END}" "${YELLOW3}${PATH_AUTH_BASE}.${SSL_KEY_MAIN01_ENC}${END}"
    # file already exists
    if ( set +f; ls ${PATH_AUTH_BASE}.*${SSL_KEY_MAIN01_ENC}* ) 1> /dev/null 2>&1; then
        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ⚠️ ‎ ‎  Skipped generating ${YELLOW3}${FILE_AUTH_BASE}${BLUE2} private key ${YELLOW3}${PATH_AUTH_BASE}.${SSL_KEY_MAIN01_ENC}${BLUE2}, key already exists from previous generation${END}"
            echo -e
        fi
    else
        openssl ecparam -genkey -name ${PARAM_CURVE} -noout -out "${PATH_AUTH_BASE}.${SSL_KEY_MAIN01_UNC}"

        if [ -z "${PWD_IN}" ]; then
            echo
            echo -e "  ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
            echo -e
            echo -e "  ${BOLD}${ORANGE}WARNING ‎ ‎‎ ‎ ‎ ‎ ‎ ‎${WHITE}--passin Not Provided${END}"
            echo -e "  ${WHITE}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎To create an ECC password protected key, you must append ${BLUE}--passin "PASSWORD"${WHITE}${END}"
            echo -e "  ${BOLD}${GREY2}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎${app_file_this} --new --algorithm \"ecc\" --passin \"YOUR_PASSWORD\" --passout \"YOUR_PASSWORD\"${END}"
            echo -e
            echo -e "  ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
            echo

            exit 1
        fi

        if [ -z "${PWD_OUT}" ]; then
            echo
            echo -e "  ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
            echo -e
            echo -e "  ${BOLD}${ORANGE}WARNING ‎ ‎‎ ‎ ‎ ‎ ‎ ‎${WHITE}--passout Not Provided${END}"
            echo -e "  ${WHITE}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎To create an ECC password protected key, you must append ${BLUE}--passout "PASSWORD"${WHITE}${END}"
            echo -e "  ${BOLD}${GREY2}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎${app_file_this} --new --algorithm \"ecc\" --passin \"YOUR_PASSWORD\" --passout \"YOUR_PASSWORD\"${END}"
            echo -e
            echo -e "  ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
            echo

            exit 1
        fi

        openssl ec -in "${PATH_AUTH_BASE}.${SSL_KEY_MAIN01_UNC}" -out "${PATH_AUTH_BASE}.${SSL_KEY_MAIN01_ENC}" -aes256 -passout "pass:${PWD_OUT}" -passin "pass:${PWD_IN}"

        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl ecparam -genkey -name ${PARAM_CURVE} -noout -out \"${PATH_AUTH_BASE}.${SSL_KEY_MAIN01_UNC}\"${END}"
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl ec -in \"${PATH_AUTH_BASE}.${SSL_KEY_MAIN01_UNC}\" -out \"${PATH_AUTH_BASE}.${SSL_KEY_MAIN01_ENC}\" -aes256 -passout pass:\"${PWD_OUT}\" -passin pass:\"${PWD_IN}\"${END}"
            echo -e
        fi
    fi
fi

# #
#   Authentication                  Create > 9a.csr
#   @search                         create-csr
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_AUTH_BASE}-003${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_AUTH_BASE}.${EXT_CSR}${END}"
openssl req -${PARAM_MD_SUB} -new -key "${PATH_AUTH_BASE}.${SSL_KEY_MAIN01_ENC}" -config "${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}" -section ${SECTION_AUTH} -out "${PATH_AUTH_BASE}.${EXT_CSR}" -passout "pass:${PWD_OUT}" -passin "pass:${PWD_IN}" --batch

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl req -${PARAM_MD_SUB} -new -key \"${PATH_AUTH_BASE}.${SSL_KEY_MAIN01_ENC}\" -config \"${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}\" -section ${SECTION_AUTH} -out \"${PATH_AUTH_BASE}.${EXT_CSR}\" -passout pass:\"${PWD_OUT}\" -passin pass:\"${PWD_IN}\" --batch${END}"
    echo -e
fi

# #
#   Authentication                  Create > 9a.crt
#   @search                         register-crt
#
#   creates certificate, registers the cert within the rootCA certs.db.
#   you must remove the certificate from the certs.db to run this again.
#   .crt file does NOT have the Bag Attributes at the top.
#
#   this command must run last, otherwise it wont generate cert serial
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_AUTH_BASE}-004${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_AUTH_BASE}.${EXT_CRT}${END}"
printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  Loading --config \"${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}\"${END}"

openssl ca -config "${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}" -multivalue-rdn -preserveDN -extensions ${EXTENSION_AUTH} -days ${PARAM_DAYS} -notext -md ${PARAM_MD_SUB} -in "${PATH_AUTH_BASE}.${EXT_CSR}" -out "${PATH_AUTH_BASE}.${EXT_CRT}" -passin "pass:${PWD_IN}" -batch 1> /dev/null 2>&1

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl ca -config \"${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}\" -multivalue-rdn -preserveDN -extensions ${EXTENSION_AUTH} -days ${PARAM_DAYS} -notext -md ${PARAM_MD_SUB} -in \"${PATH_AUTH_BASE}.${EXT_CSR}\" -out \"${PATH_AUTH_BASE}.${EXT_CRT}\" -passin pass:\"${PWD_IN}\" -batch${END}"
    echo -e
fi

# #
#   Authentication                  Create > 9a.keystore.normal.pfx
#   @search                         create-pfx-normal
#
#   rootCA -name should use "CompanyName Certificate Authority"
#   domain -name should use "CompanyName Domain Authority"
#   auth -name should use "CompanyName Authentication Authority"
#   bitlocker -name should use "CompanyName Encryption Authority"
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_AUTH_BASE}-005${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_AUTH_BASE}.${SSL_KEYSTORE_PFX}${END}"
openssl pkcs12 -export -name "${PARAM_FRIENDLY} Authentication Authority" -in "${PATH_AUTH_BASE}.${EXT_CRT}" -inkey "${PATH_AUTH_BASE}.${SSL_KEY_MAIN01_ENC}" -out "${PATH_AUTH_BASE}.${SSL_KEYSTORE_PFX}" -passin "pass:${PWD_IN}" -password "pass:${PWD_RAW}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl pkcs12 -export -name \"${PARAM_FRIENDLY} Authentication Authority\" -in \"${PATH_AUTH_BASE}.${EXT_CRT}\" -inkey \"${PATH_AUTH_BASE}.${SSL_KEY_MAIN01_ENC}\" -out \"${PATH_AUTH_BASE}.${SSL_KEYSTORE_PFX}\" -passin pass:\"${PWD_IN}\" -password pass:\"${PWD_RAW}\"${END}"
    echo -e
fi

# #
#   Authentication                  Create > 9a.crt
#   @search                         create-crt
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_AUTH_BASE}-006${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_AUTH_BASE}.${EXT_CRT}${END}"
openssl pkcs12 -in "${PATH_AUTH_BASE}.${SSL_KEYSTORE_PFX}" -clcerts -nokeys -out "${PATH_AUTH_BASE}.${EXT_CRT}" -passin "pass:${PWD_IN}" -password "pass:${PWD_RAW}" -passout "pass:${PWD_OUT}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl pkcs12 -in \"${PATH_AUTH_BASE}.${SSL_KEYSTORE_PFX}\" -clcerts -nokeys -out \"${PATH_AUTH_BASE}.${EXT_CRT}\" -passin pass:\"${PWD_IN}\" -password pass:\"${PWD_RAW}\" -passout pass:\"${PWD_OUT}\"${END}"
    echo -e
fi

# #
#   Authentication                  Remove > 9a.keystore.base64.pfx
#   @search                         remove-pfx-base64
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_AUTH_BASE}-007${END}" "${GREY3}${LNG_STEP_FILE_REMOVE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_AUTH_BASE}.${SSL_KEYSTORE_B64}${END}"
if [ -f "${PATH_AUTH_BASE}.${SSL_KEYSTORE_B64}" ]; then
    rm "${PATH_AUTH_BASE}.${SSL_KEYSTORE_B64}"

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  rm \"${PATH_AUTH_BASE}.${SSL_KEYSTORE_B64}\"${END}"
        echo -e
    fi
else
    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  Skipped${END}"
        echo -e
    fi
fi

# #
#   Authentication                  Create > 9a.keystore.base64.pfx
#   @search                         create-pfx-base64
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_AUTH_BASE}-008${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_AUTH_BASE}.${SSL_KEYSTORE_B64}${END}"
cat "${PATH_AUTH_BASE}.${SSL_KEYSTORE_PFX}" | base64 > "${PATH_AUTH_BASE}.${SSL_KEYSTORE_B64}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  cat \"${PATH_AUTH_BASE}.${SSL_KEYSTORE_PFX}\" | base64 > \"${PATH_AUTH_BASE}.${SSL_KEYSTORE_B64}\"${END}"
    echo -e
fi

# #
#   Authentication                  Create > 9a.keystore.p12
#   @search                         create-p12
#
#   @note       : p12 file is the same keystore as pfx.
# #

# #
#   printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Domain${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_AUTH_BASE}.${SSL_KEYSTORE_P12}${END}"
#   openssl pkcs12 -export -in "${PATH_AUTH_BASE}.${EXT_CRT}" -inkey "${PATH_AUTH_BASE}.${SSL_KEY_MAIN01_ENC}" -out "${PATH_AUTH_BASE}.${SSL_KEYSTORE_P12}" -passin "pass:${PWD_IN}" -password "pass:${PWD_RAW}" -passout "pass:${PWD_OUT}"
# 
#   if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
#       echo ‎ ‎${GREY2} ↳  openssl pkcs12 -export -in \"${PATH_AUTH_BASE}.${EXT_CRT}\" -inkey \"${PATH_AUTH_BASE}.${SSL_KEY_MAIN01_ENC}\" -out \"${PATH_AUTH_BASE}.${SSL_KEYSTORE_P12}\" -passin pass:\"${PWD_IN}\" -password pass:\"${PWD_RAW}\" -passout pass:\"${PWD_OUT}\"
#       echo -e
#   fi
# #

# #
#   Authentication                  Create > 9a.keycert.main-01.enc.priv.pem
#   @search                         create-keycert-enc-main-01
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_AUTH_BASE}-009${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_AUTH_BASE}.${SSL_KEYCERT_MAIN01_ENC}${END}"
openssl pkcs12 -in "${PATH_AUTH_BASE}.${SSL_KEYSTORE_PFX}" -aes-256-cbc -out "${PATH_AUTH_BASE}.${SSL_KEYCERT_MAIN01_ENC}" -passin "pass:${PWD_IN}" -password "pass:${PWD_RAW}" -passout "pass:${PWD_OUT}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl pkcs12 -in \"${PATH_AUTH_BASE}.${SSL_KEYSTORE_PFX}\" -aes-256-cbc -out \"${PATH_AUTH_BASE}.${SSL_KEYCERT_MAIN01_ENC}\" -passin pass:\"${PWD_IN}\" -password pass:\"${PWD_RAW}\" -passout pass:\"${PWD_OUT}\"${END}"
    echo -e
fi

# #
#   Authentication                  Create > 9a.keycert.main-01.unc.priv.pem
#   @search                         create-keycert-unc-main-01
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_AUTH_BASE}-010${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_AUTH_BASE}.${SSL_KEYCERT_MAIN01_UNC}${END}"
openssl pkcs12 -in "${PATH_AUTH_BASE}.${SSL_KEYSTORE_PFX}" -nodes -out "${PATH_AUTH_BASE}.${SSL_KEYCERT_MAIN01_UNC}" -passin "pass:${PWD_IN}" -password "pass:${PWD_RAW}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl pkcs12 -in \"${PATH_AUTH_BASE}.${SSL_KEYSTORE_PFX}\" -nodes -out \"${PATH_AUTH_BASE}.${SSL_KEYCERT_MAIN01_UNC}\" -passin pass:\"${PWD_IN}\" -password pass:\"${PWD_RAW}\"${END}"
    echo -e
fi

# #
#   Authentication                  Create > 9a.key.main-02.enc.priv.pem
#   @search                         create-key-enc-main-02
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_AUTH_BASE}-011${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_AUTH_BASE}.${SSL_KEY_MAIN02_ENC}${END}"
openssl pkcs12 -in "${PATH_AUTH_BASE}.${SSL_KEYSTORE_PFX}" -nocerts -out "${PATH_AUTH_BASE}.${SSL_KEY_MAIN02_ENC}" -passin "pass:${PWD_IN}" -password "pass:${PWD_RAW}" -passout "pass:${PWD_OUT}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl pkcs12 -in \"${PATH_AUTH_BASE}.${SSL_KEYSTORE_PFX}\" -nocerts -out \"${PATH_AUTH_BASE}.${SSL_KEY_MAIN02_ENC}\" -passin pass:\"${PWD_IN}\" -password pass:\"${PWD_RAW}\" -passout pass:\"${PWD_OUT}\"${END}"
    echo -e
fi

# #
#   Authentication                  Create > 9a.key.main-02.unc.priv.pem
#   @search                         create-key-unc-main-02
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_AUTH_BASE}-012${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_AUTH_BASE}.${SSL_KEY_MAIN02_UNC}${END}"
openssl pkcs12 -in "${PATH_AUTH_BASE}.${SSL_KEYSTORE_PFX}" -nocerts -nodes -out "${PATH_AUTH_BASE}.${SSL_KEY_MAIN02_UNC}" -passin "pass:${PWD_IN}" -password "pass:${PWD_RAW}" -passout "pass:${PWD_OUT}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl pkcs12 -in \"${PATH_AUTH_BASE}.${SSL_KEYSTORE_PFX}\" -nocerts -nodes -out \"${PATH_AUTH_BASE}.${SSL_KEY_MAIN02_UNC}\" -passin pass:\"${PWD_IN}\" -password pass:\"${PWD_RAW}\" -passout pass:\"${PWD_OUT}\"${END}"
    echo -e
fi

# #
#   Authentication                  Assign OpenSSH Private File
#   @search                         assign-openssh-priv
#
#   ECC keys do not have RSA.
#
#   To generate the public OpenSSH key for RSA, we use the OpenSSH private key.
#   Since ECC can't generate an OpenSSH private key from RSA, we need to tell the script which file to use to generate our ECC OpenSSH public key
# #

if [ "${PARAM_MIXED}" == "true" ] || [ "${PARAM_ALGORITHM}" == "ec" ] || [ "${PARAM_ALGORITHM}" == "ecc" ] || [ "${PARAM_ALGORITHM}" == "ecdsa" ]; then
    SSL_KEY_RSA_PRIV="${SSL_KEY_MAIN01_UNC}"
fi

# #
#   Authentication                  RSA Keys
#   @search                         create-keys-rsa
#
#   RSA keys get extra RSA keys/certs
# #

if [ "${PARAM_MIXED}" == "false" ] && [ "${PARAM_ALGORITHM}" == "rsa" ]; then

    # #
    #   Authentication                  Create > 9a.key.rsa.priv.pem
    #   @search                         create-keys-rsa-priv-pem
    # #

    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_AUTH_BASE}-013${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_AUTH_BASE}.${SSL_KEY_RSA_PRIV}${END}"
    openssl rsa -in "${PATH_AUTH_BASE}.${SSL_KEYCERT_MAIN01_ENC}" -out "${PATH_AUTH_BASE}.${SSL_KEY_RSA_PRIV}" -outform PEM -traditional -passin "pass:${PWD_IN}" -passout "pass:${PWD_OUT}"

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl rsa -in \"${PATH_AUTH_BASE}.${SSL_KEYCERT_MAIN01_ENC}\" -out \"${PATH_AUTH_BASE}.${SSL_KEY_RSA_PRIV}\" -outform PEM -traditional -passin pass:\"${PWD_IN}\" -passout pass:\"${PWD_OUT}\"${END}"
        echo -e
    fi

    # #
    #   Authentication                  Create > 9a.key.rsa.pub.pem
    #   @search                         create-keys-rsa-pub-pem
    # #

    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_AUTH_BASE}-014${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_AUTH_BASE}.${SSL_KEY_RSA_PUB}${END}"
    openssl rsa -in "${PATH_AUTH_BASE}.${SSL_KEYCERT_MAIN01_ENC}" -pubout > "${PATH_AUTH_BASE}.${SSL_KEY_RSA_PUB}" -passin "pass:${PWD_IN}" -passout "pass:${PWD_OUT}"

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl rsa -in \"${PATH_AUTH_BASE}.${SSL_KEYCERT_MAIN01_ENC}\" -pubout > \"${PATH_AUTH_BASE}.${SSL_KEY_RSA_PUB}\" -passin \"pass:${PWD_IN}\" -passout pass:\"${PWD_OUT}\"${END}"
        echo -e
    fi

fi

# #
#   Authentication                  Create > 9a.key.openssh.priv.pem
#   @search                         create-keys-openssh-priv-pem
#
#   also known as id_rsa
#   password must be at least five characters
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_AUTH_BASE}-015${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV}${END}"
if [ -n "$PWD_RAW" ] && (( ${#PWD_RAW} > 4 )) ; then
    if [ -f "${PATH_AUTH_BASE}.${SSL_KEY_RSA_PRIV}" ]; then
        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  cp \"${PATH_AUTH_BASE}.${SSL_KEY_RSA_PRIV}\" \"${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV}\"${END}"
        fi
        cp "${PATH_AUTH_BASE}.${SSL_KEY_RSA_PRIV}" "${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV}"

        # ------------------

        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ssh-keygen -p -m PEM -P \"${PWD_RAW}\" -N \"${PWD_RAW}\" -f \"${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV}\"${END}"
        fi
        SSH_CMD_1=$(ssh-keygen -p -m PEM -P "${PWD_RAW}" -N "${PWD_RAW}" -f "${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV}")
        IFS=$'\n' read -d '' -r -a OUTPUT1 <<< "$SSH_CMD_1"

        for (( i=0; i<${#OUTPUT1[@]}; i++ ))
        do
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  💬 ${OUTPUT1[$i]}${END}"
        done

        # ------------------

        if [ -n "$PARAM_COMMENT" ]; then
            openssh_comment="${PARAM_COMMENT}"

            #   append friendly name to end of openssh comment
            if [ -n "$PARAM_FRIENDLY" ]; then
                openssh_comment="${openssh_comment} - ${PARAM_FRIENDLY}"
            fi

            cert_fingerprint=$(openssl x509 -in "${PATH_AUTH_BASE}.${EXT_CRT}" -noout -fingerprint | cut -d= -f2 | sed 's/://g' )

            if [ -n "$cert_fingerprint" ]; then
                openssh_comment="${openssh_comment} (${cert_fingerprint})"
            fi

            if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
                printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ssh-keygen -c -C \"${openssh_comment}\" -P \"${PWD_RAW}\" -f  \"${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV}\"${END}"
            fi

            SSH_CMD_2=$(ssh-keygen -c -C "${openssh_comment}" -P "${PWD_RAW}" -f  "${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV}")
            IFS=$'\n' read -d '' -r -a OUTPUT2 <<< "$SSH_CMD_2"

            for (( i=0; i<${#OUTPUT2[@]}; i++ ))
            do
                printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  💬 ${OUTPUT2[$i]}${END}"
            done
        fi

        # ------------------

        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  chmod 600 \"${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV}\"${END}"
        fi

        chmod 600 "${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV}"

        # ------------------

        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            echo -e
        fi
    else
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ⚠️ ‎ ‎  Skipped copying OpenSSL file ${YELLOW3}${FILE_AUTH_BASE}.${SSL_KEY_RSA_PRIV}${RED2} to ${BLUE2}${FILE_AUTH_BASE}.${SSL_KEY_SSH_PRIV}${END}"
        echo -e
    fi
else
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ⚠️ ‎ ‎  Skipped generating OpenSSL file ${YELLOW3}${FILE_AUTH_BASE}.${SSL_KEY_SSH_PRIV}${RED2}, no ${BLUE}--password${RED2} provided${END}"
    echo -e
fi

# #
#   Authentication                  Create > 9a.key.openssh.priv.nopwd.pem
#   @search                         create-keys-openssh-priv-nopwd-pem
#
#   also known as id_rsa
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_AUTH_BASE}-016${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}${END}"
if [ -f "${PATH_AUTH_BASE}.${SSL_KEY_RSA_PRIV}" ]; then
    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  cp \"${PATH_AUTH_BASE}.${SSL_KEY_RSA_PRIV}\" \"${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}\"${END}"
    fi
    cp "${PATH_AUTH_BASE}.${SSL_KEY_RSA_PRIV}" "${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}"

    # ------------------

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ssh-keygen -p -m PEM -N \"\" -f \"${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}\"${END}"
    fi
    SSH_CMD_1=$(ssh-keygen -p -m PEM -N "" -f "${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}")
    IFS=$'\n' read -d '' -r -a OUTPUT1 <<< "$SSH_CMD_1"

    for (( i=0; i<${#OUTPUT1[@]}; i++ ))
    do
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  💬 ${OUTPUT1[$i]}${END}"
    done

    # ------------------

    if [ -n "$PARAM_COMMENT" ]; then
        openssh_comment="${PARAM_COMMENT}"

        #   append friendly name to end of openssh comment
        if [ -n "$PARAM_FRIENDLY" ]; then
            openssh_comment="${openssh_comment} - ${PARAM_FRIENDLY}"
        fi

        cert_fingerprint=$(openssl x509 -in "${PATH_AUTH_BASE}.${EXT_CRT}" -noout -fingerprint | cut -d= -f2 | sed 's/://g' )

        if [ -n "$cert_fingerprint" ]; then
            openssh_comment="${openssh_comment} (${cert_fingerprint})"
        fi

        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ssh-keygen -c -C \"${openssh_comment}\" -P \"${PWD_RAW}\" -f  \"${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}\"${END}"
        fi

        SSH_CMD_2=$(ssh-keygen -c -C "${openssh_comment}" -P "${PWD_RAW}" -f  "${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}")
        IFS=$'\n' read -d '' -r -a OUTPUT2 <<< "$SSH_CMD_2"

        for (( i=0; i<${#OUTPUT2[@]}; i++ ))
        do
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  💬 ${OUTPUT2[$i]}${END}"
        done
    fi

    # ------------------

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  chmod 600 \"${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}\"${END}"
    fi

    chmod 600 "${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}"

    # ------------------

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        echo -e
    fi
else
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ⚠️ ‎ ‎  Skipped generating OpenSSL file ${YELLOW3}${FILE_AUTH_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}${RED2} 📄  requires ${BLUE2}${FILE_AUTH_BASE}.${SSL_KEY_RSA_PRIV}${END}"
    echo -e
fi

# #
#   Authentication                  Create > 9a.key.openssh.pub
#   @search                         create-keys-openssh-pub-pem
#
#   also known as id_rsa.pub
#   
#   -y      Read a private OpenSSH format file and print an OpenSSH public key to stdout. 
#   -P      passphrase - Provides the (old) passphrase
#   -f      filename - Specifies the filename of the key file. 
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_AUTH_BASE}-017${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_AUTH_BASE}.${SSL_KEY_SSH_PUB}${END}"

if [ -f "${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}" ]; then
    ssh-keygen -P "${PWD_RAW}" -f "${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}" -y > "${PATH_AUTH_BASE}.${SSL_KEY_SSH_PUB}"

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ssh-keygen -P \"${PWD_RAW}\" -f \"${PATH_AUTH_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}\" -y > \"${PATH_AUTH_BASE}.${SSL_KEY_SSH_PUB}\"${END}"
        echo -e
    fi
else
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ⚠️ ‎ ‎  Skipped generating OpenSSL file ${YELLOW3}${FILE_AUTH_BASE}.${SSL_KEY_SSH_PUB}${RED2} 📄  requires ${BLUE2}${FILE_AUTH_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}${END}"
    echo -e
fi

# #
#   Authentication                  Create > crl/auth.crl.pem
#   @search                         create-crl-pem
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_AUTH_BASE}-018${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_ROOTCA_SUB_CRL}/${FILE_AUTH_BASE}.${SSL_EXT_CRL_PEM}${END}"
openssl ca -gencrl -config "${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}" -keyfile "${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}" -cert "${PATH_ROOTCA_BASE}.${EXT_CRT}" -out "${PATH_ROOTCA_SUB_CRL}/${FILE_AUTH_BASE}.${SSL_EXT_CRL_PEM}" -passin "pass:${PWD_IN}" -batch

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl ca -gencrl -config \"${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}\" -keyfile \"${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}\" -cert \"${PATH_ROOTCA_BASE}.${EXT_CRT}\" -out \"${PATH_ROOTCA_SUB_CRL}/${FILE_AUTH_BASE}.${SSL_EXT_CRL_PEM}\" -passin pass:\"${PWD_IN}\" -batch${END}"
    echo -e
fi

# #
#   Authentication                  Create > crl/auth.crl
#   @search                         create-crl
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_AUTH_BASE}-019${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_ROOTCA_SUB_CRL}/${FILE_AUTH_BASE}.${EXT_CRL}${END}"
openssl crl -inform PEM -in "${PATH_ROOTCA_SUB_CRL}/${FILE_AUTH_BASE}.${SSL_EXT_CRL_PEM}" -outform DER -out "${PATH_ROOTCA_SUB_CRL}/${FILE_AUTH_BASE}.${EXT_CRL}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl crl -inform PEM -in \"${PATH_ROOTCA_SUB_CRL}/${FILE_AUTH_BASE}.${SSL_EXT_CRL_PEM}\" -outform DER -out \"${PATH_ROOTCA_SUB_CRL}/${FILE_AUTH_BASE}.${EXT_CRL}\"${END}"
    echo -e
fi

# #
#   Authentication                  9a.Fullchain.pem
#   @search                         create-fullchain
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_AUTH_BASE}-020${END}" "${GREY3}${LNG_STEP_CHAIN_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_AUTH}/${SSL_CERT_FULLCHAIN}${END}"
> "${PATH_AUTH}/${FILE_AUTH_BASE}.${SSL_CERT_FULLCHAIN}"
cat "${PATH_AUTH_BASE}.${EXT_CRT}" >> "${PATH_AUTH}/${FILE_AUTH_BASE}.${SSL_CERT_FULLCHAIN}"
cat "${PATH_ROOTCA_BASE}.${EXT_CRT}" >> "${PATH_AUTH}/${FILE_AUTH_BASE}.${SSL_CERT_FULLCHAIN}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  cat \"${PATH_AUTH_BASE}.${EXT_CRT}\" >> \"${PATH_AUTH}/${FILE_AUTH_BASE}.${SSL_CERT_FULLCHAIN}\"${END}"
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  cat \"${PATH_ROOTCA_BASE}.${EXT_CRT}\" >> \"${PATH_AUTH}/${FILE_AUTH_BASE}.${SSL_CERT_FULLCHAIN}\"${END}"
    echo -e
fi

# #
#   Bitlocker                       Create > RSA > bitlocker.key.main-01.enc.priv.pem
#   @search                         create-enc-rsa
# #

if [ "${PARAM_MIXED}" == "false" ] && [ "${PARAM_ALGORITHM}" == "rsa" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_BITLOCKER_BASE}-001${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_ENC}${END}"
    if ( set +f; ls ${PATH_BITLOCKER_BASE}.*${SSL_KEY_MAIN01_ENC}* ) 1> /dev/null 2>&1; then
        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ⚠️ ‎ ‎  Skipped generating ${YELLOW3}${FILE_BITLOCKER_BASE}${BLUE2} private key ${YELLOW3}${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_ENC}${GREEN}, key already exists from previous generation${END}"
            echo -e
        fi
    else
        openssl genpkey -aes256 -algorithm RSA -pkeyopt rsa_keygen_bits:${PARAM_BITS} -out "${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_ENC}" -pass "pass:${PWD_RAW}"

        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl genpkey -aes256 -algorithm RSA -pkeyopt rsa_keygen_bits:${PARAM_BITS} -out \"${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_ENC}\" -pass \"pass:${PWD_RAW}\"${END}"
            echo -e
        fi
    fi
fi

# #
#   Bitlocker                       Create > RSA > bitlocker.key.main-01.unc.priv.pem
#   @search                         create-unc-rsa
# #

if [ "${PARAM_MIXED}" == "false" ] && [ "${PARAM_ALGORITHM}" == "rsa" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_BITLOCKER_BASE}-002${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_UNC}${END}"
    if ( set +f; ls ${PATH_BITLOCKER_BASE}.*${SSL_KEY_MAIN01_UNC}* ) 1> /dev/null 2>&1; then
        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ⚠️ ‎ ‎  Skipped generating ${YELLOW3}${FILE_BITLOCKER_BASE}${BLUE2} private key ${YELLOW3}${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_UNC}${GREEN}, key already exists from previous generation${END}"
            echo -e
        fi
    else
        openssl rsa -in "${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_ENC}"  -out "${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_UNC}" -passin "pass:${PWD_IN}" -passout "pass:${PWD_OUT}"

        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl rsa -in \"${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_ENC}\"  -out \"${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_UNC}\" -passin \"pass:${PWD_IN}\" -passout \"pass:${PWD_OUT}\"${END}"
            echo -e
        fi
    fi
fi

# #
#   Bitlocker                       Create > ECC > bitlocker.key.main-01.enc.priv.pem
#   @search                         create-enc-ecc
# #

if [ "${PARAM_MIXED}" == "true" ] || [ "${PARAM_ALGORITHM}" == "ec" ] || [ "${PARAM_ALGORITHM}" == "ecc" ] || [ "${PARAM_ALGORITHM}" == "ecdsa" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_BITLOCKER_BASE}-001${END}" "${GREY3}Generate Keys${END}" "${RED}›${END}" "${YELLOW3}${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_ENC}${END}"
    # file already exists
    if ( set +f; ls ${PATH_BITLOCKER_BASE}.*${SSL_KEY_MAIN01_ENC}* ) 1> /dev/null 2>&1; then
        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ⚠️ ‎ ‎  Skipped generating ${YELLOW3}${FILE_BITLOCKER_BASE}${BLUE2} private key ${YELLOW3}${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_ENC}${BLUE2}, key already exists from previous generation${END}"
            echo -e
        fi
    else
        openssl ecparam -genkey -name ${PARAM_CURVE} -noout -out "${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_UNC}"

        if [ -z "${PWD_IN}" ]; then
            echo
            echo -e "  ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
            echo -e
            echo -e "  ${BOLD}${ORANGE}WARNING ‎ ‎‎ ‎ ‎ ‎ ‎ ‎${WHITE}--passin Not Provided${END}"
            echo -e "  ${WHITE}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎To create an ECC password protected key, you must append ${BLUE}--passin "PASSWORD"${WHITE}${END}"
            echo -e "  ${BOLD}${GREY2}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎${app_file_this} --new --algorithm \"ecc\" --passin \"YOUR_PASSWORD\" --passout \"YOUR_PASSWORD\"${END}"
            echo -e
            echo -e "  ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
            echo

            exit 1
        fi

        if [ -z "${PWD_OUT}" ]; then
            echo
            echo -e "  ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
            echo -e
            echo -e "  ${BOLD}${ORANGE}WARNING ‎ ‎‎ ‎ ‎ ‎ ‎ ‎${WHITE}--passout Not Provided${END}"
            echo -e "  ${WHITE}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎To create an ECC password protected key, you must append ${BLUE}--passout "PASSWORD"${WHITE}${END}"
            echo -e "  ${BOLD}${GREY2}‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎‎ ‎ ‎ ‎‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎${app_file_this} --new --algorithm \"ecc\" --passin \"YOUR_PASSWORD\" --passout \"YOUR_PASSWORD\"${END}"
            echo -e
            echo -e "  ${BLUE}―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――${END}"
            echo

            exit 1
        fi

        openssl ec -in "${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_UNC}" -out "${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_ENC}" -aes256 -passout "pass:${PWD_OUT}" -passin "pass:${PWD_IN}"

        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl ecparam -genkey -name ${PARAM_CURVE} -noout -out \"${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_UNC}\"${END}"
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl ec -in \"${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_UNC}\" -out \"${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_ENC}\" -aes256 -passout pass:\"${PWD_OUT}\" -passin pass:\"${PWD_IN}\"${END}"
            echo -e
        fi
    fi
fi

# #
#   Bitlocker                       Create > bitlocker.csr
#   @search                         create-csr
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_BITLOCKER_BASE}-003${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_BITLOCKER_BASE}.${EXT_CSR}${END}"
openssl req -${PARAM_MD_SUB} -new -key "${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_ENC}" -config "${PATH_ROOTCA}/${PARAM_CNF_BITLOCKER}" -section ${SECTION_BITLOCKER} -out "${PATH_BITLOCKER_BASE}.${EXT_CSR}" -passout "pass:${PWD_OUT}" -passin "pass:${PWD_IN}" --batch

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl req -${PARAM_MD_SUB} -new -key \"${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_ENC}\" -config \"${PATH_ROOTCA}/${PARAM_CNF_BITLOCKER}\" -section ${SECTION_BITLOCKER} -out \"${PATH_BITLOCKER_BASE}.${EXT_CSR}\" -passout pass:\"${PWD_OUT}\" -passin pass:\"${PWD_IN}\" --batch${END}"
    echo -e
fi

# #
#   Bitlocker                       Create > bitlocker.crt
#   @search                         register-crt
#
#   creates certificate, registers the cert within the rootCA certs.db.
#   you must remove the certificate from the certs.db to run this again.
#   .crt file does NOT have the Bag Attributes at the top.
#
#   this command must run last, otherwise it wont generate cert serial
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_BITLOCKER_BASE}-004${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_BITLOCKER_BASE}.${EXT_CRT}${END}"
printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  Loading --config \"${PATH_ROOTCA}/${PARAM_CNF_BITLOCKER}\"${END}"

openssl ca -config "${PATH_ROOTCA}/${PARAM_CNF_BITLOCKER}" -multivalue-rdn -preserveDN -extensions ${EXTENSION_BITLOCKER} -days ${PARAM_DAYS} -notext -md ${PARAM_MD_SUB} -in "${PATH_BITLOCKER_BASE}.${EXT_CSR}" -out "${PATH_BITLOCKER_BASE}.${EXT_CRT}" -passin "pass:${PWD_IN}" -batch 1> /dev/null 2>&1

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl ca -config \"${PATH_ROOTCA}/${PARAM_CNF_BITLOCKER}\" -multivalue-rdn -preserveDN -extensions ${EXTENSION_BITLOCKER} -days ${PARAM_DAYS} -notext -md ${PARAM_MD_SUB} -in \"${PATH_BITLOCKER_BASE}.${EXT_CSR}\" -out \"${PATH_BITLOCKER_BASE}.${EXT_CRT}\" -passin pass:\"${PWD_IN}\" -batch$${END}"
    echo -e
fi

# #
#   Bitlocker                       Create > bitlocker.keystore.normal.pfx
#   @search                         create-pfx-normal
#
#   rootCA -name should use "CompanyName Certificate Authority"
#   domain -name should use "CompanyName Domain Authority"
#   auth -name should use "CompanyName Authentication Authority"
#   bitlocker -name should use "CompanyName Encryption Authority"
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_BITLOCKER_BASE}-005${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_PFX}${END}"
openssl pkcs12 -export -name "${PARAM_FRIENDLY} Encryption Authority" -in "${PATH_BITLOCKER_BASE}.${EXT_CRT}" -inkey "${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_ENC}" -out "${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_PFX}" -passin "pass:${PWD_IN}" -password "pass:${PWD_RAW}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl pkcs12 -export -name \"${PARAM_FRIENDLY} Encryption Authority\" -in \"${PATH_BITLOCKER_BASE}.${EXT_CRT}\" -inkey \"${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_ENC}\" -out \"${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_PFX}\" -passin pass:\"${PWD_IN}\" -password pass:\"${PWD_RAW}\"${END}"
    echo -e
fi

# #
#   Bitlocker                       Create > bitlocker.crt
#   @search                         create-crt
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_BITLOCKER_BASE}-006${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_BITLOCKER_BASE}.${EXT_CRT}${END}"
openssl pkcs12 -in "${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_PFX}" -clcerts -nokeys -out "${PATH_BITLOCKER_BASE}.${EXT_CRT}" -passin "pass:${PWD_IN}" -password "pass:${PWD_RAW}" -passout "pass:${PWD_OUT}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl pkcs12 -in \"${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_PFX}\" -clcerts -nokeys -out \"${PATH_BITLOCKER_BASE}.${EXT_CRT}\" -passin pass:\"${PWD_IN}\" -password pass:\"${PWD_RAW}\" -passout pass:\"${PWD_OUT}\"${END}"
    echo -e
fi

# #
#   Bitlocker                       Remove > bitlocker.keystore.base64.pfx
#   @search                         remove-pfx-base64
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_BITLOCKER_BASE}-007${END}" "${GREY3}${LNG_STEP_FILE_REMOVE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_B64}${END}"
if [ -f "${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_B64}" ]; then
    rm "${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_B64}"

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  rm \"${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_B64}\"${END}"
        echo -e
    fi
else
    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  Skipped${END}"
        echo -e
    fi
fi

# #
#   Bitlocker                       Create > bitlocker.keystore.base64.pfx
#   @search                         create-pfx-base64
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_BITLOCKER_BASE}-008${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_B64}${END}"
cat "${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_PFX}" | base64 > "${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_B64}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  cat \"${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_PFX}\" | base64 > \"${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_B64}\"${END}"
    echo -e
fi

# #
#   Bitlocker                       Create > bitlocker.keystore.p12
#   @search                         create-p12
#
#   @note       : p12 file is the same keystore as pfx.
# #

# #
#   printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}Domain${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_P12}${END}"
#   openssl pkcs12 -export -in "${PATH_BITLOCKER_BASE}.${EXT_CRT}" -inkey "${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_ENC}" -out "${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_P12}" -passin "pass:${PWD_IN}" -password "pass:${PWD_RAW}" -passout "pass:${PWD_OUT}"
# 
#   if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
#       echo ‎ ‎${GREY2} ↳  openssl pkcs12 -export -in \"${PATH_BITLOCKER_BASE}.${EXT_CRT}\" -inkey \"${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN01_ENC}\" -out \"${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_P12}\" -passin pass:\"${PWD_IN}\" -password pass:\"${PWD_RAW}\" -passout pass:\"${PWD_OUT}\"
#       echo -e
#   fi
# #

# #
#   Bitlocker                       Create > bitlocker.keycert.main-01.enc.priv.pem
#   @search                         create-keycert-enc-main-01
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_BITLOCKER_BASE}-009${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_BITLOCKER_BASE}.${SSL_KEYCERT_MAIN01_ENC}${END}"
openssl pkcs12 -in "${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_PFX}" -aes-256-cbc -out "${PATH_BITLOCKER_BASE}.${SSL_KEYCERT_MAIN01_ENC}" -passin "pass:${PWD_IN}" -password "pass:${PWD_RAW}" -passout "pass:${PWD_OUT}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl pkcs12 -in \"${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_PFX}\" -aes-256-cbc -out \"${PATH_BITLOCKER_BASE}.${SSL_KEYCERT_MAIN01_ENC}\" -passin pass:\"${PWD_IN}\" -password pass:\"${PWD_RAW}\" -passout pass:\"${PWD_OUT}\"${END}"
    echo -e
fi

# #
#   Bitlocker                       Create > bitlocker.keycert.main-01.unc.priv.pem
#   @search                         create-keycert-unc-main-01
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_BITLOCKER_BASE}-010${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_BITLOCKER_BASE}.${SSL_KEYCERT_MAIN01_UNC}${END}"
openssl pkcs12 -in "${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_PFX}" -nodes -out "${PATH_BITLOCKER_BASE}.${SSL_KEYCERT_MAIN01_UNC}" -passin "pass:${PWD_IN}" -password "pass:${PWD_RAW}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl pkcs12 -in \"${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_PFX}\" -nodes -out \"${PATH_BITLOCKER_BASE}.${SSL_KEYCERT_MAIN01_UNC}\" -passin pass:\"${PWD_IN}\" -password pass:\"${PWD_RAW}\"${END}"
    echo -e
fi

# #
#   Bitlocker                       Create > bitlocker.key.main-02.enc.priv.pem
#   @search                         create-key-enc-main-02
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_BITLOCKER_BASE}-011${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN02_ENC}${END}"
openssl pkcs12 -in "${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_PFX}" -nocerts -out "${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN02_ENC}" -passin "pass:${PWD_IN}" -password "pass:${PWD_RAW}" -passout "pass:${PWD_OUT}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl pkcs12 -in \"${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_PFX}\" -nocerts -out \"${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN02_ENC}\" -passin pass:\"${PWD_IN}\" -password pass:\"${PWD_RAW}\" -passout pass:\"${PWD_OUT}\"${END}"
    echo -e
fi

# #
#   Bitlocker                       Create > bitlocker.key.main-02.unc.priv.pem
#   @search                         create-key-unc-main-02
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_BITLOCKER_BASE}-012${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN02_UNC}${END}"
openssl pkcs12 -in "${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_PFX}" -nocerts -nodes -out "${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN02_UNC}" -passin "pass:${PWD_IN}" -password "pass:${PWD_RAW}" -passout "pass:${PWD_OUT}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl pkcs12 -in \"${PATH_BITLOCKER_BASE}.${SSL_KEYSTORE_PFX}\" -nocerts -nodes -out \"${PATH_BITLOCKER_BASE}.${SSL_KEY_MAIN02_UNC}\" -passin pass:\"${PWD_IN}\" -password pass:\"${PWD_RAW}\" -passout pass:\"${PWD_OUT}\"${END}"
    echo -e
fi

# #
#   Bitlocker                       Assign OpenSSH Private File
#   @search                         assign-openssh-priv
#
#   ECC keys do not have RSA.
#
#   To generate the public OpenSSH key for RSA, we use the OpenSSH private key.
#   Since ECC can't generate an OpenSSH private key from RSA, we need to tell the script which file to use to generate our ECC OpenSSH public key
# #

if [ "${PARAM_MIXED}" == "true" ] || [ "${PARAM_ALGORITHM}" == "ec" ] || [ "${PARAM_ALGORITHM}" == "ecc" ] || [ "${PARAM_ALGORITHM}" == "ecdsa" ]; then
    SSL_KEY_RSA_PRIV="${SSL_KEY_MAIN01_UNC}"
fi

# #
#   Bitlocker                       RSA Keys
#   @search                         create-keys-rsa
#
#   RSA keys get extra RSA keys/certs
# #

if [ "${PARAM_MIXED}" == "false" ] && [ "${PARAM_ALGORITHM}" == "rsa" ]; then

    # #
    #   Bitlocker                       Create > bitlocker.key.rsa.priv.pem
    #   @search                         create-keys-rsa-priv-pem
    # #

    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_BITLOCKER_BASE}-013${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_BITLOCKER_BASE}.${SSL_KEY_RSA_PRIV}${END}"
    openssl rsa -in "${PATH_BITLOCKER_BASE}.${SSL_KEYCERT_MAIN01_ENC}" -out "${PATH_BITLOCKER_BASE}.${SSL_KEY_RSA_PRIV}" -outform PEM -traditional -passin "pass:${PWD_IN}" -passout "pass:${PWD_OUT}"

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl rsa -in \"${PATH_BITLOCKER_BASE}.${SSL_KEYCERT_MAIN01_ENC}\" -out \"${PATH_BITLOCKER_BASE}.${SSL_KEY_RSA_PRIV}\" -outform PEM -traditional -passin pass:\"${PWD_IN}\" -passout pass:\"${PWD_OUT}\"${END}"
        echo -e
    fi

    # #
    #   Bitlocker                       Create > bitlocker.key.rsa.pub.pem
    #   @search                         create-keys-rsa-pub-pem
    # #

    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_BITLOCKER_BASE}-014${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_BITLOCKER_BASE}.${SSL_KEY_RSA_PUB}${END}"
    openssl rsa -in "${PATH_BITLOCKER_BASE}.${SSL_KEYCERT_MAIN01_ENC}" -pubout > "${PATH_BITLOCKER_BASE}.${SSL_KEY_RSA_PUB}" -passin "pass:${PWD_IN}" -passout "pass:${PWD_OUT}"

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl rsa -in \"${PATH_BITLOCKER_BASE}.${SSL_KEYCERT_MAIN01_ENC}\" -pubout > \"${PATH_BITLOCKER_BASE}.${SSL_KEY_RSA_PUB}\" -passin pass:\"${PWD_IN}\" -passout pass:\"${PWD_OUT}\"${END}"
        echo -e
    fi

fi

# #
#   Bitlocker                       Create > bitlocker.key.openssh.priv.pem
#   @search                         create-keys-openssh-priv-pem
#
#   also known as id_rsa
#   password must be at least five characters
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_BITLOCKER_BASE}-015${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV}${END}"
if [ -n "$PWD_RAW" ] && (( ${#PWD_RAW} > 4 )) ; then
    if [ -f "${PATH_BITLOCKER_BASE}.${SSL_KEY_RSA_PRIV}" ]; then
        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  cp \"${PATH_BITLOCKER_BASE}.${SSL_KEY_RSA_PRIV}\" \"${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV}\"${END}"
        fi
        cp "${PATH_BITLOCKER_BASE}.${SSL_KEY_RSA_PRIV}" "${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV}"

        # ------------------

        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ssh-keygen -p -m PEM -P \"${PWD_RAW}\" -N \"${PWD_RAW}\" -f \"${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV}\"${END}"
        fi
        SSH_CMD_1=$(ssh-keygen -p -m PEM -P "${PWD_RAW}" -N "${PWD_RAW}" -f "${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV}")
        IFS=$'\n' read -d '' -r -a OUTPUT1 <<< "$SSH_CMD_1"

        for (( i=0; i<${#OUTPUT1[@]}; i++ ))
        do
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  💬 ${OUTPUT1[$i]}${END}"
        done

        # ------------------

        if [ -n "$PARAM_COMMENT" ]; then
            openssh_comment="${PARAM_COMMENT}"

            #   append friendly name to end of openssh comment
            if [ -n "$PARAM_FRIENDLY" ]; then
                openssh_comment="${openssh_comment} - ${PARAM_FRIENDLY}"
            fi

            cert_fingerprint=$(openssl x509 -in "${PATH_BITLOCKER_BASE}.${EXT_CRT}" -noout -fingerprint | cut -d= -f2 | sed 's/://g' )

            if [ -n "$cert_fingerprint" ]; then
                openssh_comment="${openssh_comment} (${cert_fingerprint})"
            fi

            if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
                printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ssh-keygen -c -C \"${openssh_comment}\" -P \"${PWD_RAW}\" -f  \"${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV}\"${END}"
            fi

            SSH_CMD_2=$(ssh-keygen -c -C "${openssh_comment}" -P "${PWD_RAW}" -f  "${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV}")
            IFS=$'\n' read -d '' -r -a OUTPUT2 <<< "$SSH_CMD_2"

            for (( i=0; i<${#OUTPUT2[@]}; i++ ))
            do
                printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  💬 ${OUTPUT2[$i]}${END}"
            done
        fi

        # ------------------

        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  chmod 600 \"${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV}\"${END}"
        fi

        chmod 600 "${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV}"

        # ------------------

        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            echo -e
        fi

    else
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ⚠️ ‎ ‎  Skipped copying OpenSSL file ${YELLOW3}${FILE_BITLOCKER_BASE}.${SSL_KEY_RSA_PRIV}${RED2} to ${BLUE2}${FILE_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV}${END}"
        echo -e
    fi
else
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ⚠️ ‎ ‎  Skipped generating OpenSSL file ${YELLOW3}${FILE_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV}${RED2}, no ${BLUE}--password${RED2} provided${END}"
    echo -e
fi

# #
#   Bitlocker                       Create > bitlocker.key.openssh.priv.nopwd.pem
#   @search                         create-keys-openssh-priv-nopwd-pem
#
#   also known as id_rsa
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_BITLOCKER_BASE}-016${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}${END}"
if [ -f "${PATH_BITLOCKER_BASE}.${SSL_KEY_RSA_PRIV}" ]; then
    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  cp \"${PATH_BITLOCKER_BASE}.${SSL_KEY_RSA_PRIV}\" \"${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}\"${END}"
    fi
    cp "${PATH_BITLOCKER_BASE}.${SSL_KEY_RSA_PRIV}" "${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}"

    # ------------------

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ssh-keygen -p -m PEM -P \"${PWD_RAW}\"  -N \"${PWD_RAW}\" -f \"${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}\"${END}"
    fi
    SSH_CMD_1=$(ssh-keygen -p -m PEM -N "" -f "${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}")
    IFS=$'\n' read -d '' -r -a OUTPUT1 <<< "$SSH_CMD_1"

    for (( i=0; i<${#OUTPUT1[@]}; i++ ))
    do
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  💬 ${OUTPUT1[$i]}${END}"
    done

    # ------------------

    if [ -n "$PARAM_COMMENT" ]; then
        openssh_comment="${PARAM_COMMENT}"

        #   append friendly name to end of openssh comment
        if [ -n "$PARAM_FRIENDLY" ]; then
            openssh_comment="${openssh_comment} - ${PARAM_FRIENDLY}"
        fi

        cert_fingerprint=$(openssl x509 -in "${PATH_BITLOCKER_BASE}.${EXT_CRT}" -noout -fingerprint | cut -d= -f2 | sed 's/://g' )

        if [ -n "$cert_fingerprint" ]; then
            openssh_comment="${openssh_comment} (${cert_fingerprint})"
        fi

        if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ssh-keygen -c -C \"${openssh_comment}\" -P \"${PWD_RAW}\" -f  \"${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}\"${END}"
        fi

        SSH_CMD_2=$(ssh-keygen -c -C "${openssh_comment}" -P "${PWD_RAW}" -f  "${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}")
        IFS=$'\n' read -d '' -r -a OUTPUT2 <<< "$SSH_CMD_2"

        for (( i=0; i<${#OUTPUT2[@]}; i++ ))
        do
            printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  💬 ${OUTPUT2[$i]}${END}"
        done
    fi

    # ------------------

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  chmod 600 \"${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}\"${END}"
    fi

    chmod 600 "${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}"

    # ------------------

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        echo -e
    fi
else
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ⚠️ ‎ ‎  Skipped generating OpenSSL file ${YELLOW3}${FILE_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}${RED2} 📄  requires ${BLUE2}${FILE_BITLOCKER_BASE}.${SSL_KEY_RSA_PRIV}${END}"
    echo -e
fi

# #
#   Bitlocker                       Create > bitlocker.key.openssh.pub
#   @search                         create-keys-openssh-pub-pem
#
#   also known as id_rsa.pub
#   
#   -y      Read a private OpenSSH format file and print an OpenSSH public key to stdout. 
#   -P      passphrase - Provides the (old) passphrase
#   -f      filename - Specifies the filename of the key file. 
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_BITLOCKER_BASE}-017${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PUB}${END}"

if [ -f "${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}" ]; then
    ssh-keygen -P "${PWD_RAW}" -f "${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}" -y > "${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PUB}"

    if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
        printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ssh-keygen -P \"${PWD_RAW}\" -f \"${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}\" -y > \"${PATH_BITLOCKER_BASE}.${SSL_KEY_SSH_PUB}\"${END}"
        echo -e
    fi
else
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  ⚠️ ‎ ‎  Skipped generating OpenSSL file ${YELLOW3}${FILE_BITLOCKER_BASE}.${SSL_KEY_SSH_PUB}${RED2} 📄  requires ${BLUE2}${FILE_BITLOCKER_BASE}.${SSL_KEY_SSH_PRIV_NOPWD}${END}"
    echo -e
fi

# #
#   Bitlocker > Create              crl/bitlocker.crl.pem
#   @search                         create-crl-pem
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_BITLOCKER_BASE}-018${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_ROOTCA_SUB_CRL}/${FILE_BITLOCKER_BASE}.${SSL_EXT_CRL_PEM}${END}"
openssl ca -gencrl -config "${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}" -keyfile "${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}" -cert "${PATH_ROOTCA_BASE}.${EXT_CRT}" -out "${PATH_ROOTCA_SUB_CRL}/${FILE_BITLOCKER_BASE}.${SSL_EXT_CRL_PEM}" -passin "pass:${PWD_IN}" -batch

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl ca -gencrl -config \"${PATH_ROOTCA}/${PARAM_CNF_ROOTCA}\" -keyfile \"${PATH_ROOTCA_BASE}.${SSL_KEY_MAIN01_ENC}\" -cert \"${PATH_ROOTCA_BASE}.${EXT_CRT}\" -out \"${PATH_ROOTCA_SUB_CRL}/${FILE_BITLOCKER_BASE}.${SSL_EXT_CRL_PEM}\" -passin pass:\"${PWD_IN}\" -batch${END}"
    echo -e
fi

# #
#   Bitlocker > Create              crl/bitlocker.crl
#   @search                         create-crl
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_BITLOCKER_BASE}-019${END}" "${GREY3}${LNG_STEP_FILE_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_ROOTCA_SUB_CRL}/${FILE_BITLOCKER_BASE}.${EXT_CRL}${END}"
openssl crl -inform PEM -in "${PATH_ROOTCA_SUB_CRL}/${FILE_BITLOCKER_BASE}.${SSL_EXT_CRL_PEM}" -outform DER -out "${PATH_ROOTCA_SUB_CRL}/${FILE_BITLOCKER_BASE}.${EXT_CRL}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  openssl crl -inform PEM -in \"${PATH_ROOTCA_SUB_CRL}/${FILE_BITLOCKER_BASE}.${SSL_EXT_CRL_PEM}\" -outform DER -out \"${PATH_ROOTCA_SUB_CRL}/${FILE_BITLOCKER_BASE}.${EXT_CRL}\"${END}"
    echo -e
fi

# #
#   Bitlocker                       bitlocker.Fullchain.pem
#   @search                         create-fullchain
# #

printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${FILE_BITLOCKER_BASE}-020${END}" "${GREY3}${LNG_STEP_CHAIN_CREATE}${END}" "${RED}›${END}" "${YELLOW3}${PATH_BITLOCKER}/${SSL_CERT_FULLCHAIN}${END}"
> "${PATH_BITLOCKER}/${FILE_BITLOCKER_BASE}.${SSL_CERT_FULLCHAIN}"
cat "${PATH_BITLOCKER_BASE}.${EXT_CRT}" >> "${PATH_BITLOCKER}/${FILE_BITLOCKER_BASE}.${SSL_CERT_FULLCHAIN}"
cat "${PATH_ROOTCA_BASE}.${EXT_CRT}" >> "${PATH_BITLOCKER}/${FILE_BITLOCKER_BASE}.${SSL_CERT_FULLCHAIN}"

if [ "${PARAM_DEV_ENABLED}" == "true" ]; then
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  cat \"${PATH_BITLOCKER_BASE}.${EXT_CRT}\" >> \"${PATH_BITLOCKER}/${FILE_BITLOCKER_BASE}.${SSL_CERT_FULLCHAIN}\"${END}"
    printf '%-30s %-30s %-5s %-40s\n' "  ${ORANGE}${END}" "${GREY3}${END}" "${RED}›${END}" "${GREY2} ↳  cat \"${PATH_ROOTCA_BASE}.${EXT_CRT}\" >> \"${PATH_BITLOCKER}/${FILE_BITLOCKER_BASE}.${SSL_CERT_FULLCHAIN}\"${END}"
    echo -e
fi

readStatus

exit 1